ql ::= qldoc? moduleBody

module ::= annotation* "module" modulename parameters? implements? "{" moduleBody "}"

parameters ::= "<" signatureExpr parameterName ("," signatureExpr parameterName)* ">"

implements ::= "implements" moduleSignatureExpr ("," moduleSignatureExpr)*

moduleBody ::= (import | predicate | class | module | alias | select)*

import ::= annotations "import" importModuleExpr ("as" modulename)?

qualId ::= simpleId | qualId "." simpleId

importModuleExpr ::= qualId | importModuleExpr "::" modulename arguments?

arguments ::= "<" argument ("," argument)* ">"

argument ::= moduleExpr | type | predicateRef "/" int

signature ::= predicateSignature | typeSignature | moduleSignature

predicateSignature ::= qldoc? annotations "signature" head ";"

typeSignature ::= qldoc? annotations "signature" "class" classname ("extends" type ("," type)*)? (";" | "{" signaturePredicate* "}")

moduleSignature ::= qldoc? annotation* "signature" "module" moduleSignatureName parameters? "{" moduleSignatureBody "}"

moduleSignatureBody ::= (signaturePredicate | defaultPredicate | signatureType)*

signaturePredicate ::= qldoc? annotations head ";"

defaultPredicate ::= qldoc? annotations "default" head "{" formula "}"

signatureType ::= qldoc? annotations "class" classname ("extends" type ("," type)*)? "{" signaturePredicate* "}"

select ::= ("from" var_decls)? ("where" formula)? "select" as_exprs ("order" "by" orderbys)?

as_exprs ::= as_expr ("," as_expr)*

as_expr ::= expr ("as" lowerId)?

orderbys ::= orderby ("," orderby)*

orderby ::= lowerId ("asc" | "desc")?

predicate ::= qldoc? annotations head optbody

annotations ::= annotation*

annotation ::= simpleAnnotation | argsAnnotation

simpleAnnotation ::= "abstract"
                 |   "cached"
                 |   "external"
                 |   "extensible"
                 |   "final"
                 |   "transient"
                 |   "library"
                 |   "private"
                 |   "deprecated"
                 |   "override"
                 |   "additional"
                 |   "query"

argsAnnotation ::= "pragma" "[" ("inline" | "inline_late" | "noinline" | "nomagic" | "noopt" | "assume_small_delta") "]"
               |   "language" "[" "monotonicAggregates" "]"
               |   "bindingset" "[" (variable ( "," variable)*)? "]"

head ::= ("predicate" | type) predicateName "(" var_decls ")"

optbody ::= ";"
        |  "{" formula "}"
        |  "=" literalId "(" (predicateRef "/" int ("," predicateRef "/" int)*)? ")" "(" (exprs)? ")"

class ::= qldoc? annotations "class" classname ("extends" type ("," type)*)? ("instanceof" type ("," type)*)?  "{" member* "}"

member ::= character | predicate | field

character ::= qldoc? annotations classname "(" ")" "{" formula "}"

field ::= qldoc? annotations var_decl ";"

moduleExpr ::= modulename arguments? | moduleExpr "::" modulename arguments?

moduleSignatureExpr ::= (moduleExpr "::")? moduleSignatureName arguments?

signatureExpr : (moduleExpr "::")? simpleId ("/" Integer | arguments)?;

type ::= (moduleExpr "::")? classname | dbasetype | "boolean" | "date" | "float" | "int" | "string"

exprs ::= expr ("," expr)*

alias ::= qldoc? annotations "predicate" literalId "=" predicateRef "/" int ";"
      |  qldoc? annotations "class" classname "=" type ";"
      |  qldoc? annotations "module" modulename "=" moduleExpr ";"

var_decls ::= (var_decl ("," var_decl)*)?

var_decl ::= type lowerId

formula ::= fparen
        |   disjunction
        |   conjunction
        |   implies
        |   ifthen
        |   negated
        |   quantified
        |   comparison
        |   instanceof
        |   inrange
        |   call

fparen ::= "(" formula ")"

disjunction ::= formula "or" formula

conjunction ::= formula "and" formula

implies ::= formula "implies" formula

ifthen ::= "if" formula "then" formula "else" formula

negated ::= "not" formula

quantified ::= "exists" "(" expr ")"
           |   "exists" "(" var_decls ("|" formula)? ("|" formula)? ")"
           |   "forall" "(" var_decls ("|" formula)? "|" formula ")"
           |   "forex"  "(" var_decls ("|" formula)? "|" formula ")"

comparison ::= expr compop expr

compop ::= "=" | "!=" | "<" | ">" | "<=" | ">="

instanceof ::= expr "instanceof" type

inrange ::= expr "in" (range | setliteral)

call ::= predicateRef (closure)? "(" (exprs)? ")"
     |   primary "." predicateName (closure)? "(" (exprs)? ")"

closure ::= "*" | "+"

expr ::= dontcare
     |   unop
     |   binop
     |   cast
     |   primary


primary ::= eparen
        |   literal
        |   variable
        |   super_expr
        |   postfix_cast
        |   callwithresults
        |   aggregation
        |   expression_pragma
        |   any
        |   range
        |   setliteral

eparen ::= "(" expr ")"

dontcare ::= "_"

literal ::= "false" | "true" | int | float | string

unop ::= "+" expr
     |   "-" expr

binop ::= expr "+" expr
      |   expr "-" expr
      |   expr "*" expr
      |   expr "/" expr
      |   expr "%" expr

variable ::= varname | "this" | "result"

super_expr ::= "super" | type "." "super"

cast ::= "(" type ")" expr

postfix_cast ::= primary "." "(" type ")"

aggregation ::= aggid ("[" expr "]")? "(" var_decls ("|" (formula)? ("|" as_exprs ("order" "by" aggorderbys)?)?)? ")"
            |   aggid ("[" expr "]")? "(" as_exprs ("order" "by" aggorderbys)? ")"
            |   "unique" "(" var_decls "|" (formula)? ("|" as_exprs)? ")"

expression_pragma ::= "pragma" "[" expression_pragma_type "]" "(" expr ")"

expression_pragma_type ::= "only_bind_out" | "only_bind_into"

aggid ::= "avg" | "concat" | "count" | "max" | "min" | "rank" | "strictconcat" | "strictcount" | "strictsum" | "sum"

aggorderbys ::= aggorderby ("," aggorderby)*

aggorderby ::= expr ("asc" | "desc")?

any ::= "any" "(" var_decls ("|" (formula)? ("|" expr)?)? ")"

callwithresults ::= predicateRef (closure)? "(" (exprs)? ")"
                |   primary "." predicateName (closure)? "(" (exprs)? ")"

range ::= "[" expr ".." expr "]"

setliteral ::= "[" expr ("," expr)* ","? "]"

simpleId ::= lowerId | upperId

modulename ::= simpleId

moduleSignatureName ::= upperId

classname ::= upperId

dbasetype ::= atLowerId

predicateRef ::= (moduleExpr "::")? literalId

predicateName ::= lowerId

parameterName ::= simpleId

varname ::= lowerId

literalId ::= lowerId | atLowerId | "any" | "none"

