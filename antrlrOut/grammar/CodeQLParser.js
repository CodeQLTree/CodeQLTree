// Generated from grammar/CodeQL.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var CodeQLListener = require('./CodeQLListener').CodeQLListener;
var CodeQLVisitor = require('./CodeQLVisitor').CodeQLVisitor;

var grammarFileName = "CodeQL.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003p\u040c\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0003\u0002\u0005",
    "\u0002\u00b8\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0007\u0003",
    "\u00bd\n\u0003\f\u0003\u000e\u0003\u00c0\u000b\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0005\u0003\u00c5\n\u0003\u0003\u0003\u0005\u0003",
    "\u00c8\n\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0007\u0004\u00d5\n\u0004\f\u0004\u000e\u0004\u00d8\u000b\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0007\u0005\u00e0\n\u0005\f\u0005\u000e\u0005\u00e3\u000b\u0005\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0007",
    "\u0006\u00eb\n\u0006\f\u0006\u000e\u0006\u00ee\u000b\u0006\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u00f5\n",
    "\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0007\b\u00fd",
    "\n\b\f\b\u000e\b\u0100\u000b\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0005\t\u0109\n\t\u0007\t\u010b\n\t\f\t\u000e\t\u010e",
    "\u000b\t\u0003\n\u0003\n\u0003\n\u0003\n\u0007\n\u0114\n\n\f\n\u000e",
    "\n\u0117\u000b\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u0121\n\u000b\u0003",
    "\f\u0003\f\u0003\f\u0005\f\u0126\n\f\u0003\r\u0005\r\u0129\n\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\u000e\u0005\u000e\u0131\n\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0007\u000e\u013b\n\u000e\f\u000e\u000e\u000e",
    "\u013e\u000b\u000e\u0005\u000e\u0140\n\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0007\u000e\u0145\n\u000e\f\u000e\u000e\u000e\u0148\u000b",
    "\u000e\u0003\u000e\u0005\u000e\u014b\n\u000e\u0003\u000f\u0005\u000f",
    "\u014e\n\u000f\u0003\u000f\u0007\u000f\u0151\n\u000f\f\u000f\u000e\u000f",
    "\u0154\u000b\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005",
    "\u000f\u015a\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u0163\n\u0010\f\u0010",
    "\u000e\u0010\u0166\u000b\u0010\u0003\u0011\u0005\u0011\u0169\n\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0005\u0012",
    "\u0170\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0005\u0013\u017a\n\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0007\u0013\u0183\n\u0013\f\u0013\u000e\u0013\u0186\u000b",
    "\u0013\u0005\u0013\u0188\n\u0013\u0003\u0013\u0003\u0013\u0007\u0013",
    "\u018c\n\u0013\f\u0013\u000e\u0013\u018f\u000b\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0014\u0003\u0014\u0005\u0014\u0195\n\u0014\u0003\u0014",
    "\u0003\u0014\u0005\u0014\u0199\n\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u01a0\n\u0014\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0007\u0015\u01a5\n\u0015\f\u0015\u000e\u0015",
    "\u01a8\u000b\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u01ad",
    "\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0007\u0017\u01b2\n\u0017",
    "\f\u0017\u000e\u0017\u01b5\u000b\u0017\u0003\u0018\u0003\u0018\u0005",
    "\u0018\u01b9\n\u0018\u0003\u0019\u0005\u0019\u01bc\n\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0007\u001a\u01c3\n",
    "\u001a\f\u001a\u000e\u001a\u01c6\u000b\u001a\u0003\u001b\u0003\u001b",
    "\u0005\u001b\u01ca\n\u001b\u0003\u001c\u0003\u001c\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0007",
    "\u001d\u01db\n\u001d\f\u001d\u000e\u001d\u01de\u000b\u001d\u0005\u001d",
    "\u01e0\n\u001d\u0003\u001d\u0005\u001d\u01e3\n\u001d\u0003\u001e\u0003",
    "\u001e\u0005\u001e\u01e7\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0007\u001f\u01fe\n\u001f\f\u001f\u000e\u001f\u0201\u000b\u001f\u0005",
    "\u001f\u0203\n\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f",
    "\u0208\n\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u020c\n\u001f\u0003",
    " \u0005 \u020f\n \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0007",
    " \u0218\n \f \u000e \u021b\u000b \u0005 \u021d\n \u0003 \u0003 \u0003",
    " \u0003 \u0007 \u0223\n \f \u000e \u0226\u000b \u0005 \u0228\n \u0003",
    " \u0003 \u0007 \u022c\n \f \u000e \u022f\u000b \u0003 \u0003 \u0003",
    "!\u0003!\u0003!\u0005!\u0236\n!\u0003\"\u0005\"\u0239\n\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003#\u0005#\u0244",
    "\n#\u0003#\u0003#\u0003#\u0003#\u0003$\u0003$\u0003$\u0005$\u024d\n",
    "$\u0003$\u0003$\u0003$\u0003$\u0005$\u0253\n$\u0007$\u0255\n$\f$\u000e",
    "$\u0258\u000b$\u0003%\u0003%\u0003%\u0005%\u025d\n%\u0003%\u0003%\u0005",
    "%\u0261\n%\u0003&\u0003&\u0003&\u0005&\u0266\n&\u0003&\u0003&\u0003",
    "&\u0003&\u0005&\u026c\n&\u0003\'\u0003\'\u0003\'\u0005\'\u0271\n\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'\u027a\n\'",
    "\u0003(\u0003(\u0003(\u0007(\u027f\n(\f(\u000e(\u0282\u000b(\u0003)",
    "\u0005)\u0285\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0005)\u0291\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0005)\u029b\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0005)\u02a4\n)\u0003*\u0003*\u0003*\u0007*\u02a9\n*\f*\u000e",
    "*\u02ac\u000b*\u0005*\u02ae\n*\u0003+\u0003+\u0003+\u0003,\u0003,\u0003",
    ",\u0005,\u02b6\n,\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    ".\u0003.\u0003.\u0007.\u02c2\n.\f.\u000e.\u02c5\u000b.\u0003/\u0003",
    "/\u0003/\u0007/\u02ca\n/\f/\u000e/\u02cd\u000b/\u00030\u00030\u0003",
    "0\u00070\u02d2\n0\f0\u000e0\u02d5\u000b0\u00031\u00031\u00031\u0005",
    "1\u02da\n1\u00032\u00032\u00032\u00032\u00033\u00033\u00034\u00034\u0003",
    "4\u00034\u00035\u00035\u00035\u00035\u00055\u02ea\n5\u00036\u00036\u0005",
    "6\u02ee\n6\u00036\u00036\u00056\u02f2\n6\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00056\u02fa\n6\u00036\u00036\u00056\u02fe\n6\u0003",
    "6\u00036\u00056\u0302\n6\u00037\u00037\u00038\u00038\u00038\u00078\u0309",
    "\n8\f8\u000e8\u030c\u000b8\u00039\u00039\u00079\u0310\n9\f9\u000e9\u0313",
    "\u000b9\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003",
    ":\u0003:\u0003:\u0003:\u0005:\u0321\n:\u0003;\u0003;\u0005;\u0325\n",
    ";\u0003<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003>\u0003",
    ">\u0003>\u0003>\u0003?\u0003?\u0003@\u0003@\u0003A\u0003A\u0003A\u0005",
    "A\u033a\nA\u0003B\u0003B\u0003B\u0003B\u0003B\u0005B\u0341\nB\u0003",
    "C\u0003C\u0003C\u0003C\u0003C\u0003D\u0003D\u0005D\u034a\nD\u0003D\u0003",
    "D\u0005D\u034e\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u0355\n",
    "D\u0003D\u0003D\u0005D\u0359\nD\u0003D\u0003D\u0005D\u035d\nD\u0003",
    "E\u0003E\u0003E\u0003E\u0003E\u0005E\u0364\nE\u0003E\u0003E\u0003E\u0003",
    "E\u0005E\u036a\nE\u0003E\u0003E\u0003E\u0003E\u0003E\u0005E\u0371\n",
    "E\u0005E\u0373\nE\u0005E\u0375\nE\u0003E\u0003E\u0003E\u0003E\u0003",
    "E\u0003E\u0003E\u0005E\u037e\nE\u0003E\u0003E\u0003E\u0003E\u0003E\u0005",
    "E\u0385\nE\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0005E\u038e",
    "\nE\u0003E\u0003E\u0005E\u0392\nE\u0003E\u0003E\u0005E\u0396\nE\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003G\u0003G\u0003",
    "H\u0003H\u0003I\u0003I\u0003I\u0007I\u03a7\nI\fI\u000eI\u03aa\u000b",
    "I\u0003J\u0003J\u0005J\u03ae\nJ\u0003K\u0003K\u0003K\u0003K\u0003K\u0005",
    "K\u03b5\nK\u0003K\u0003K\u0005K\u03b9\nK\u0005K\u03bb\nK\u0003K\u0003",
    "K\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003M\u0003M\u0003M\u0003",
    "M\u0007M\u03c9\nM\fM\u000eM\u03cc\u000bM\u0003M\u0005M\u03cf\nM\u0003",
    "M\u0003M\u0003N\u0003N\u0005N\u03d5\nN\u0003O\u0003O\u0003P\u0003P\u0003",
    "Q\u0003Q\u0003R\u0003R\u0003S\u0003S\u0003S\u0005S\u03e2\nS\u0003S\u0003",
    "S\u0003T\u0003T\u0003U\u0003U\u0003V\u0003V\u0003W\u0003W\u0003W\u0003",
    "W\u0005W\u03f0\nW\u0003X\u0003X\u0007X\u03f4\nX\fX\u000eX\u03f7\u000b",
    "X\u0003Y\u0003Y\u0007Y\u03fb\nY\fY\u000eY\u03fe\u000bY\u0003Z\u0003",
    "Z\u0003Z\u0003[\u0003[\u0007[\u0405\n[\f[\u000e[\u0408\u000b[\u0003",
    "[\u0003[\u0003[\u0003\u0406\u0005\u000e\u0010F\\\u0002\u0004\u0006\b",
    "\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.",
    "02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088",
    "\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0",
    "\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u0002\r",
    "\u0003\u0002\u0019\u001a\u0003\u0002\u001b&\u0003\u0002).\u0006\u0002",
    "\u0006\u0006\b\b66DF\u0003\u0002IJ\u0004\u0002\u000e\u000eIL\u0003\u0002",
    "JK\u0004\u0002NOkm\u0003\u0002UV\u0003\u0002W`\u0004\u0002MMgi\u0002",
    "\u0449\u0002\u00b7\u0003\u0002\u0002\u0002\u0004\u00be\u0003\u0002\u0002",
    "\u0002\u0006\u00cd\u0003\u0002\u0002\u0002\b\u00db\u0003\u0002\u0002",
    "\u0002\n\u00ec\u0003\u0002\u0002\u0002\f\u00ef\u0003\u0002\u0002\u0002",
    "\u000e\u00f6\u0003\u0002\u0002\u0002\u0010\u0101\u0003\u0002\u0002\u0002",
    "\u0012\u010f\u0003\u0002\u0002\u0002\u0014\u0120\u0003\u0002\u0002\u0002",
    "\u0016\u0125\u0003\u0002\u0002\u0002\u0018\u0128\u0003\u0002\u0002\u0002",
    "\u001a\u0130\u0003\u0002\u0002\u0002\u001c\u014d\u0003\u0002\u0002\u0002",
    "\u001e\u0164\u0003\u0002\u0002\u0002 \u0168\u0003\u0002\u0002\u0002",
    "\"\u016f\u0003\u0002\u0002\u0002$\u0179\u0003\u0002\u0002\u0002&\u0194",
    "\u0003\u0002\u0002\u0002(\u01a1\u0003\u0002\u0002\u0002*\u01a9\u0003",
    "\u0002\u0002\u0002,\u01ae\u0003\u0002\u0002\u0002.\u01b6\u0003\u0002",
    "\u0002\u00020\u01bb\u0003\u0002\u0002\u00022\u01c4\u0003\u0002\u0002",
    "\u00024\u01c9\u0003\u0002\u0002\u00026\u01cb\u0003\u0002\u0002\u0002",
    "8\u01e2\u0003\u0002\u0002\u0002:\u01e6\u0003\u0002\u0002\u0002<\u020b",
    "\u0003\u0002\u0002\u0002>\u020e\u0003\u0002\u0002\u0002@\u0235\u0003",
    "\u0002\u0002\u0002B\u0238\u0003\u0002\u0002\u0002D\u0243\u0003\u0002",
    "\u0002\u0002F\u0249\u0003\u0002\u0002\u0002H\u025c\u0003\u0002\u0002",
    "\u0002J\u0265\u0003\u0002\u0002\u0002L\u0279\u0003\u0002\u0002\u0002",
    "N\u027b\u0003\u0002\u0002\u0002P\u02a3\u0003\u0002\u0002\u0002R\u02ad",
    "\u0003\u0002\u0002\u0002T\u02af\u0003\u0002\u0002\u0002V\u02b5\u0003",
    "\u0002\u0002\u0002X\u02b7\u0003\u0002\u0002\u0002Z\u02be\u0003\u0002",
    "\u0002\u0002\\\u02c6\u0003\u0002\u0002\u0002^\u02ce\u0003\u0002\u0002",
    "\u0002`\u02d9\u0003\u0002\u0002\u0002b\u02db\u0003\u0002\u0002\u0002",
    "d\u02df\u0003\u0002\u0002\u0002f\u02e1\u0003\u0002\u0002\u0002h\u02e5",
    "\u0003\u0002\u0002\u0002j\u0301\u0003\u0002\u0002\u0002l\u0303\u0003",
    "\u0002\u0002\u0002n\u0305\u0003\u0002\u0002\u0002p\u030d\u0003\u0002",
    "\u0002\u0002r\u0320\u0003\u0002\u0002\u0002t\u0324\u0003\u0002\u0002",
    "\u0002v\u0326\u0003\u0002\u0002\u0002x\u0329\u0003\u0002\u0002\u0002",
    "z\u032e\u0003\u0002\u0002\u0002|\u0332\u0003\u0002\u0002\u0002~\u0334",
    "\u0003\u0002\u0002\u0002\u0080\u0339\u0003\u0002\u0002\u0002\u0082\u0340",
    "\u0003\u0002\u0002\u0002\u0084\u0342\u0003\u0002\u0002\u0002\u0086\u035c",
    "\u0003\u0002\u0002\u0002\u0088\u0395\u0003\u0002\u0002\u0002\u008a\u0397",
    "\u0003\u0002\u0002\u0002\u008c\u039f\u0003\u0002\u0002\u0002\u008e\u03a1",
    "\u0003\u0002\u0002\u0002\u0090\u03a3\u0003\u0002\u0002\u0002\u0092\u03ab",
    "\u0003\u0002\u0002\u0002\u0094\u03af\u0003\u0002\u0002\u0002\u0096\u03be",
    "\u0003\u0002\u0002\u0002\u0098\u03c4\u0003\u0002\u0002\u0002\u009a\u03d4",
    "\u0003\u0002\u0002\u0002\u009c\u03d6\u0003\u0002\u0002\u0002\u009e\u03d8",
    "\u0003\u0002\u0002\u0002\u00a0\u03da\u0003\u0002\u0002\u0002\u00a2\u03dc",
    "\u0003\u0002\u0002\u0002\u00a4\u03e1\u0003\u0002\u0002\u0002\u00a6\u03e5",
    "\u0003\u0002\u0002\u0002\u00a8\u03e7\u0003\u0002\u0002\u0002\u00aa\u03e9",
    "\u0003\u0002\u0002\u0002\u00ac\u03ef\u0003\u0002\u0002\u0002\u00ae\u03f1",
    "\u0003\u0002\u0002\u0002\u00b0\u03f8\u0003\u0002\u0002\u0002\u00b2\u03ff",
    "\u0003\u0002\u0002\u0002\u00b4\u0402\u0003\u0002\u0002\u0002\u00b6\u00b8",
    "\u0005\u00b4[\u0002\u00b7\u00b6\u0003\u0002\u0002\u0002\u00b7\u00b8",
    "\u0003\u0002\u0002\u0002\u00b8\u00b9\u0003\u0002\u0002\u0002\u00b9\u00ba",
    "\u0005\n\u0006\u0002\u00ba\u0003\u0003\u0002\u0002\u0002\u00bb\u00bd",
    "\u00054\u001b\u0002\u00bc\u00bb\u0003\u0002\u0002\u0002\u00bd\u00c0",
    "\u0003\u0002\u0002\u0002\u00be\u00bc\u0003\u0002\u0002\u0002\u00be\u00bf",
    "\u0003\u0002\u0002\u0002\u00bf\u00c1\u0003\u0002\u0002\u0002\u00c0\u00be",
    "\u0003\u0002\u0002\u0002\u00c1\u00c2\u0007\u0003\u0002\u0002\u00c2\u00c4",
    "\u0005\u009cO\u0002\u00c3\u00c5\u0005\u0006\u0004\u0002\u00c4\u00c3",
    "\u0003\u0002\u0002\u0002\u00c4\u00c5\u0003\u0002\u0002\u0002\u00c5\u00c7",
    "\u0003\u0002\u0002\u0002\u00c6\u00c8\u0005\b\u0005\u0002\u00c7\u00c6",
    "\u0003\u0002\u0002\u0002\u00c7\u00c8\u0003\u0002\u0002\u0002\u00c8\u00c9",
    "\u0003\u0002\u0002\u0002\u00c9\u00ca\u0007\u0004\u0002\u0002\u00ca\u00cb",
    "\u0005\n\u0006\u0002\u00cb\u00cc\u0007\u0005\u0002\u0002\u00cc\u0005",
    "\u0003\u0002\u0002\u0002\u00cd\u00ce\u0007\u0006\u0002\u0002\u00ce\u00cf",
    "\u0005J&\u0002\u00cf\u00d6\u0005\u00a8U\u0002\u00d0\u00d1\u0007\u0007",
    "\u0002\u0002\u00d1\u00d2\u0005J&\u0002\u00d2\u00d3\u0005\u00a8U\u0002",
    "\u00d3\u00d5\u0003\u0002\u0002\u0002\u00d4\u00d0\u0003\u0002\u0002\u0002",
    "\u00d5\u00d8\u0003\u0002\u0002\u0002\u00d6\u00d4\u0003\u0002\u0002\u0002",
    "\u00d6\u00d7\u0003\u0002\u0002\u0002\u00d7\u00d9\u0003\u0002\u0002\u0002",
    "\u00d8\u00d6\u0003\u0002\u0002\u0002\u00d9\u00da\u0007\b\u0002\u0002",
    "\u00da\u0007\u0003\u0002\u0002\u0002\u00db\u00dc\u0007\t\u0002\u0002",
    "\u00dc\u00e1\u0005H%\u0002\u00dd\u00de\u0007\u0007\u0002\u0002\u00de",
    "\u00e0\u0005H%\u0002\u00df\u00dd\u0003\u0002\u0002\u0002\u00e0\u00e3",
    "\u0003\u0002\u0002\u0002\u00e1\u00df\u0003\u0002\u0002\u0002\u00e1\u00e2",
    "\u0003\u0002\u0002\u0002\u00e2\t\u0003\u0002\u0002\u0002\u00e3\u00e1",
    "\u0003\u0002\u0002\u0002\u00e4\u00eb\u0005\f\u0007\u0002\u00e5\u00eb",
    "\u00050\u0019\u0002\u00e6\u00eb\u0005> \u0002\u00e7\u00eb\u0005\u0004",
    "\u0003\u0002\u00e8\u00eb\u0005P)\u0002\u00e9\u00eb\u0005&\u0014\u0002",
    "\u00ea\u00e4\u0003\u0002\u0002\u0002\u00ea\u00e5\u0003\u0002\u0002\u0002",
    "\u00ea\u00e6\u0003\u0002\u0002\u0002\u00ea\u00e7\u0003\u0002\u0002\u0002",
    "\u00ea\u00e8\u0003\u0002\u0002\u0002\u00ea\u00e9\u0003\u0002\u0002\u0002",
    "\u00eb\u00ee\u0003\u0002\u0002\u0002\u00ec\u00ea\u0003\u0002\u0002\u0002",
    "\u00ec\u00ed\u0003\u0002\u0002\u0002\u00ed\u000b\u0003\u0002\u0002\u0002",
    "\u00ee\u00ec\u0003\u0002\u0002\u0002\u00ef\u00f0\u00052\u001a\u0002",
    "\u00f0\u00f1\u0007\n\u0002\u0002\u00f1\u00f4\u0005\u0010\t\u0002\u00f2",
    "\u00f3\u0007\u000b\u0002\u0002\u00f3\u00f5\u0005\u009cO\u0002\u00f4",
    "\u00f2\u0003\u0002\u0002\u0002\u00f4\u00f5\u0003\u0002\u0002\u0002\u00f5",
    "\r\u0003\u0002\u0002\u0002\u00f6\u00f7\b\b\u0001\u0002\u00f7\u00f8\u0005",
    "\u009aN\u0002\u00f8\u00fe\u0003\u0002\u0002\u0002\u00f9\u00fa\f\u0003",
    "\u0002\u0002\u00fa\u00fb\u0007\f\u0002\u0002\u00fb\u00fd\u0005\u009a",
    "N\u0002\u00fc\u00f9\u0003\u0002\u0002\u0002\u00fd\u0100\u0003\u0002",
    "\u0002\u0002\u00fe\u00fc\u0003\u0002\u0002\u0002\u00fe\u00ff\u0003\u0002",
    "\u0002\u0002\u00ff\u000f\u0003\u0002\u0002\u0002\u0100\u00fe\u0003\u0002",
    "\u0002\u0002\u0101\u0102\b\t\u0001\u0002\u0102\u0103\u0005\u000e\b\u0002",
    "\u0103\u010c\u0003\u0002\u0002\u0002\u0104\u0105\f\u0003\u0002\u0002",
    "\u0105\u0106\u0007\r\u0002\u0002\u0106\u0108\u0005\u009cO\u0002\u0107",
    "\u0109\u0005\u0012\n\u0002\u0108\u0107\u0003\u0002\u0002\u0002\u0108",
    "\u0109\u0003\u0002\u0002\u0002\u0109\u010b\u0003\u0002\u0002\u0002\u010a",
    "\u0104\u0003\u0002\u0002\u0002\u010b\u010e\u0003\u0002\u0002\u0002\u010c",
    "\u010a\u0003\u0002\u0002\u0002\u010c\u010d\u0003\u0002\u0002\u0002\u010d",
    "\u0011\u0003\u0002\u0002\u0002\u010e\u010c\u0003\u0002\u0002\u0002\u010f",
    "\u0110\u0007\u0006\u0002\u0002\u0110\u0115\u0005\u0014\u000b\u0002\u0111",
    "\u0112\u0007\u0007\u0002\u0002\u0112\u0114\u0005\u0014\u000b\u0002\u0113",
    "\u0111\u0003\u0002\u0002\u0002\u0114\u0117\u0003\u0002\u0002\u0002\u0115",
    "\u0113\u0003\u0002\u0002\u0002\u0115\u0116\u0003\u0002\u0002\u0002\u0116",
    "\u0118\u0003\u0002\u0002\u0002\u0117\u0115\u0003\u0002\u0002\u0002\u0118",
    "\u0119\u0007\b\u0002\u0002\u0119\u0013\u0003\u0002\u0002\u0002\u011a",
    "\u0121\u0005F$\u0002\u011b\u0121\u0005L\'\u0002\u011c\u011d\u0005\u00a4",
    "S\u0002\u011d\u011e\u0007\u000e\u0002\u0002\u011e\u011f\u0007l\u0002",
    "\u0002\u011f\u0121\u0003\u0002\u0002\u0002\u0120\u011a\u0003\u0002\u0002",
    "\u0002\u0120\u011b\u0003\u0002\u0002\u0002\u0120\u011c\u0003\u0002\u0002",
    "\u0002\u0121\u0015\u0003\u0002\u0002\u0002\u0122\u0126\u0005\u0018\r",
    "\u0002\u0123\u0126\u0005\u001a\u000e\u0002\u0124\u0126\u0005\u001c\u000f",
    "\u0002\u0125\u0122\u0003\u0002\u0002\u0002\u0125\u0123\u0003\u0002\u0002",
    "\u0002\u0125\u0124\u0003\u0002\u0002\u0002\u0126\u0017\u0003\u0002\u0002",
    "\u0002\u0127\u0129\u0005\u00b4[\u0002\u0128\u0127\u0003\u0002\u0002",
    "\u0002\u0128\u0129\u0003\u0002\u0002\u0002\u0129\u012a\u0003\u0002\u0002",
    "\u0002\u012a\u012b\u00052\u001a\u0002\u012b\u012c\u0007\u000f\u0002",
    "\u0002\u012c\u012d\u0005:\u001e\u0002\u012d\u012e\u0007\u0010\u0002",
    "\u0002\u012e\u0019\u0003\u0002\u0002\u0002\u012f\u0131\u0005\u00b4[",
    "\u0002\u0130\u012f\u0003\u0002\u0002\u0002\u0130\u0131\u0003\u0002\u0002",
    "\u0002\u0131\u0132\u0003\u0002\u0002\u0002\u0132\u0133\u00052\u001a",
    "\u0002\u0133\u0134\u0007\u000f\u0002\u0002\u0134\u0135\u0007\u0011\u0002",
    "\u0002\u0135\u013f\u0005\u00a0Q\u0002\u0136\u0137\u0007\u0012\u0002",
    "\u0002\u0137\u013c\u0005L\'\u0002\u0138\u0139\u0007\u0007\u0002\u0002",
    "\u0139\u013b\u0005L\'\u0002\u013a\u0138\u0003\u0002\u0002\u0002\u013b",
    "\u013e\u0003\u0002\u0002\u0002\u013c\u013a\u0003\u0002\u0002\u0002\u013c",
    "\u013d\u0003\u0002\u0002\u0002\u013d\u0140\u0003\u0002\u0002\u0002\u013e",
    "\u013c\u0003\u0002\u0002\u0002\u013f\u0136\u0003\u0002\u0002\u0002\u013f",
    "\u0140\u0003\u0002\u0002\u0002\u0140\u014a\u0003\u0002\u0002\u0002\u0141",
    "\u014b\u0007\u0010\u0002\u0002\u0142\u0146\u0007\u0004\u0002\u0002\u0143",
    "\u0145\u0005 \u0011\u0002\u0144\u0143\u0003\u0002\u0002\u0002\u0145",
    "\u0148\u0003\u0002\u0002\u0002\u0146\u0144\u0003\u0002\u0002\u0002\u0146",
    "\u0147\u0003\u0002\u0002\u0002\u0147\u0149\u0003\u0002\u0002\u0002\u0148",
    "\u0146\u0003\u0002\u0002\u0002\u0149\u014b\u0007\u0005\u0002\u0002\u014a",
    "\u0141\u0003\u0002\u0002\u0002\u014a\u0142\u0003\u0002\u0002\u0002\u014b",
    "\u001b\u0003\u0002\u0002\u0002\u014c\u014e\u0005\u00b4[\u0002\u014d",
    "\u014c\u0003\u0002\u0002\u0002\u014d\u014e\u0003\u0002\u0002\u0002\u014e",
    "\u0152\u0003\u0002\u0002\u0002\u014f\u0151\u00054\u001b\u0002\u0150",
    "\u014f\u0003\u0002\u0002\u0002\u0151\u0154\u0003\u0002\u0002\u0002\u0152",
    "\u0150\u0003\u0002\u0002\u0002\u0152\u0153\u0003\u0002\u0002\u0002\u0153",
    "\u0155\u0003\u0002\u0002\u0002\u0154\u0152\u0003\u0002\u0002\u0002\u0155",
    "\u0156\u0007\u000f\u0002\u0002\u0156\u0157\u0007\u0003\u0002\u0002\u0157",
    "\u0159\u0005\u009eP\u0002\u0158\u015a\u0005\u0006\u0004\u0002\u0159",
    "\u0158\u0003\u0002\u0002\u0002\u0159\u015a\u0003\u0002\u0002\u0002\u015a",
    "\u015b\u0003\u0002\u0002\u0002\u015b\u015c\u0007\u0004\u0002\u0002\u015c",
    "\u015d\u0005\u001e\u0010\u0002\u015d\u015e\u0007\u0005\u0002\u0002\u015e",
    "\u001d\u0003\u0002\u0002\u0002\u015f\u0163\u0005 \u0011\u0002\u0160",
    "\u0163\u0005\"\u0012\u0002\u0161\u0163\u0005$\u0013\u0002\u0162\u015f",
    "\u0003\u0002\u0002\u0002\u0162\u0160\u0003\u0002\u0002\u0002\u0162\u0161",
    "\u0003\u0002\u0002\u0002\u0163\u0166\u0003\u0002\u0002\u0002\u0164\u0162",
    "\u0003\u0002\u0002\u0002\u0164\u0165\u0003\u0002\u0002\u0002\u0165\u001f",
    "\u0003\u0002\u0002\u0002\u0166\u0164\u0003\u0002\u0002\u0002\u0167\u0169",
    "\u0005\u00b4[\u0002\u0168\u0167\u0003\u0002\u0002\u0002\u0168\u0169",
    "\u0003\u0002\u0002\u0002\u0169\u016a\u0003\u0002\u0002\u0002\u016a\u016b",
    "\u00052\u001a\u0002\u016b\u016c\u0005:\u001e\u0002\u016c\u016d\u0007",
    "\u0010\u0002\u0002\u016d!\u0003\u0002\u0002\u0002\u016e\u0170\u0005",
    "\u00b4[\u0002\u016f\u016e\u0003\u0002\u0002\u0002\u016f\u0170\u0003",
    "\u0002\u0002\u0002\u0170\u0171\u0003\u0002\u0002\u0002\u0171\u0172\u0005",
    "2\u001a\u0002\u0172\u0173\u0007\u0013\u0002\u0002\u0173\u0174\u0005",
    ":\u001e\u0002\u0174\u0175\u0007\u0004\u0002\u0002\u0175\u0176\u0005",
    "V,\u0002\u0176\u0177\u0007\u0005\u0002\u0002\u0177#\u0003\u0002\u0002",
    "\u0002\u0178\u017a\u0005\u00b4[\u0002\u0179\u0178\u0003\u0002\u0002",
    "\u0002\u0179\u017a\u0003\u0002\u0002\u0002\u017a\u017b\u0003\u0002\u0002",
    "\u0002\u017b\u017c\u00052\u001a\u0002\u017c\u017d\u0007\u0011\u0002",
    "\u0002\u017d\u0187\u0005\u00a0Q\u0002\u017e\u017f\u0007\u0012\u0002",
    "\u0002\u017f\u0184\u0005L\'\u0002\u0180\u0181\u0007\u0007\u0002\u0002",
    "\u0181\u0183\u0005L\'\u0002\u0182\u0180\u0003\u0002\u0002\u0002\u0183",
    "\u0186\u0003\u0002\u0002\u0002\u0184\u0182\u0003\u0002\u0002\u0002\u0184",
    "\u0185\u0003\u0002\u0002\u0002\u0185\u0188\u0003\u0002\u0002\u0002\u0186",
    "\u0184\u0003\u0002\u0002\u0002\u0187\u017e\u0003\u0002\u0002\u0002\u0187",
    "\u0188\u0003\u0002\u0002\u0002\u0188\u0189\u0003\u0002\u0002\u0002\u0189",
    "\u018d\u0007\u0004\u0002\u0002\u018a\u018c\u0005 \u0011\u0002\u018b",
    "\u018a\u0003\u0002\u0002\u0002\u018c\u018f\u0003\u0002\u0002\u0002\u018d",
    "\u018b\u0003\u0002\u0002\u0002\u018d\u018e\u0003\u0002\u0002\u0002\u018e",
    "\u0190\u0003\u0002\u0002\u0002\u018f\u018d\u0003\u0002\u0002\u0002\u0190",
    "\u0191\u0007\u0005\u0002\u0002\u0191%\u0003\u0002\u0002\u0002\u0192",
    "\u0193\u0007\u0014\u0002\u0002\u0193\u0195\u0005R*\u0002\u0194\u0192",
    "\u0003\u0002\u0002\u0002\u0194\u0195\u0003\u0002\u0002\u0002\u0195\u0198",
    "\u0003\u0002\u0002\u0002\u0196\u0197\u0007\u0015\u0002\u0002\u0197\u0199",
    "\u0005V,\u0002\u0198\u0196\u0003\u0002\u0002\u0002\u0198\u0199\u0003",
    "\u0002\u0002\u0002\u0199\u019a\u0003\u0002\u0002\u0002\u019a\u019b\u0007",
    "\u0016\u0002\u0002\u019b\u019f\u0005(\u0015\u0002\u019c\u019d\u0007",
    "\u0017\u0002\u0002\u019d\u019e\u0007\u0018\u0002\u0002\u019e\u01a0\u0005",
    ",\u0017\u0002\u019f\u019c\u0003\u0002\u0002\u0002\u019f\u01a0\u0003",
    "\u0002\u0002\u0002\u01a0\'\u0003\u0002\u0002\u0002\u01a1\u01a6\u0005",
    "*\u0016\u0002\u01a2\u01a3\u0007\u0007\u0002\u0002\u01a3\u01a5\u0005",
    "*\u0016\u0002\u01a4\u01a2\u0003\u0002\u0002\u0002\u01a5\u01a8\u0003",
    "\u0002\u0002\u0002\u01a6\u01a4\u0003\u0002\u0002\u0002\u01a6\u01a7\u0003",
    "\u0002\u0002\u0002\u01a7)\u0003\u0002\u0002\u0002\u01a8\u01a6\u0003",
    "\u0002\u0002\u0002\u01a9\u01ac\u0005n8\u0002\u01aa\u01ab\u0007\u000b",
    "\u0002\u0002\u01ab\u01ad\u0005\u00aeX\u0002\u01ac\u01aa\u0003\u0002",
    "\u0002\u0002\u01ac\u01ad\u0003\u0002\u0002\u0002\u01ad+\u0003\u0002",
    "\u0002\u0002\u01ae\u01b3\u0005.\u0018\u0002\u01af\u01b0\u0007\u0007",
    "\u0002\u0002\u01b0\u01b2\u0005.\u0018\u0002\u01b1\u01af\u0003\u0002",
    "\u0002\u0002\u01b2\u01b5\u0003\u0002\u0002\u0002\u01b3\u01b1\u0003\u0002",
    "\u0002\u0002\u01b3\u01b4\u0003\u0002\u0002\u0002\u01b4-\u0003\u0002",
    "\u0002\u0002\u01b5\u01b3\u0003\u0002\u0002\u0002\u01b6\u01b8\u0005\u00ae",
    "X\u0002\u01b7\u01b9\t\u0002\u0002\u0002\u01b8\u01b7\u0003\u0002\u0002",
    "\u0002\u01b8\u01b9\u0003\u0002\u0002\u0002\u01b9/\u0003\u0002\u0002",
    "\u0002\u01ba\u01bc\u0005\u00b4[\u0002\u01bb\u01ba\u0003\u0002\u0002",
    "\u0002\u01bb\u01bc\u0003\u0002\u0002\u0002\u01bc\u01bd\u0003\u0002\u0002",
    "\u0002\u01bd\u01be\u00052\u001a\u0002\u01be\u01bf\u0005:\u001e\u0002",
    "\u01bf\u01c0\u0005<\u001f\u0002\u01c01\u0003\u0002\u0002\u0002\u01c1",
    "\u01c3\u00054\u001b\u0002\u01c2\u01c1\u0003\u0002\u0002\u0002\u01c3",
    "\u01c6\u0003\u0002\u0002\u0002\u01c4\u01c2\u0003\u0002\u0002\u0002\u01c4",
    "\u01c5\u0003\u0002\u0002\u0002\u01c53\u0003\u0002\u0002\u0002\u01c6",
    "\u01c4\u0003\u0002\u0002\u0002\u01c7\u01ca\u00056\u001c\u0002\u01c8",
    "\u01ca\u00058\u001d\u0002\u01c9\u01c7\u0003\u0002\u0002\u0002\u01c9",
    "\u01c8\u0003\u0002\u0002\u0002\u01ca5\u0003\u0002\u0002\u0002\u01cb",
    "\u01cc\t\u0003\u0002\u0002\u01cc7\u0003\u0002\u0002\u0002\u01cd\u01ce",
    "\u0007\'\u0002\u0002\u01ce\u01cf\u0007(\u0002\u0002\u01cf\u01d0\t\u0004",
    "\u0002\u0002\u01d0\u01e3\u0007/\u0002\u0002\u01d1\u01d2\u00070\u0002",
    "\u0002\u01d2\u01d3\u0007(\u0002\u0002\u01d3\u01d4\u00071\u0002\u0002",
    "\u01d4\u01e3\u0007/\u0002\u0002\u01d5\u01d6\u00072\u0002\u0002\u01d6",
    "\u01df\u0007(\u0002\u0002\u01d7\u01dc\u0005\u0080A\u0002\u01d8\u01d9",
    "\u0007\u0007\u0002\u0002\u01d9\u01db\u0005\u0080A\u0002\u01da\u01d8",
    "\u0003\u0002\u0002\u0002\u01db\u01de\u0003\u0002\u0002\u0002\u01dc\u01da",
    "\u0003\u0002\u0002\u0002\u01dc\u01dd\u0003\u0002\u0002\u0002\u01dd\u01e0",
    "\u0003\u0002\u0002\u0002\u01de\u01dc\u0003\u0002\u0002\u0002\u01df\u01d7",
    "\u0003\u0002\u0002\u0002\u01df\u01e0\u0003\u0002\u0002\u0002\u01e0\u01e1",
    "\u0003\u0002\u0002\u0002\u01e1\u01e3\u0007/\u0002\u0002\u01e2\u01cd",
    "\u0003\u0002\u0002\u0002\u01e2\u01d1\u0003\u0002\u0002\u0002\u01e2\u01d5",
    "\u0003\u0002\u0002\u0002\u01e39\u0003\u0002\u0002\u0002\u01e4\u01e7",
    "\u00073\u0002\u0002\u01e5\u01e7\u0005L\'\u0002\u01e6\u01e4\u0003\u0002",
    "\u0002\u0002\u01e6\u01e5\u0003\u0002\u0002\u0002\u01e7\u01e8\u0003\u0002",
    "\u0002\u0002\u01e8\u01e9\u0005\u00a6T\u0002\u01e9\u01ea\u00074\u0002",
    "\u0002\u01ea\u01eb\u0005R*\u0002\u01eb\u01ec\u00075\u0002\u0002\u01ec",
    ";\u0003\u0002\u0002\u0002\u01ed\u020c\u0007\u0010\u0002\u0002\u01ee",
    "\u01ef\u0007\u0004\u0002\u0002\u01ef\u01f0\u0005V,\u0002\u01f0\u01f1",
    "\u0007\u0005\u0002\u0002\u01f1\u020c\u0003\u0002\u0002\u0002\u01f2\u01f3",
    "\u00076\u0002\u0002\u01f3\u01f4\u0005\u00acW\u0002\u01f4\u0202\u0007",
    "4\u0002\u0002\u01f5\u01f6\u0005\u00a4S\u0002\u01f6\u01f7\u0007\u000e",
    "\u0002\u0002\u01f7\u01ff\u0007l\u0002\u0002\u01f8\u01f9\u0007\u0007",
    "\u0002\u0002\u01f9\u01fa\u0005\u00a4S\u0002\u01fa\u01fb\u0007\u000e",
    "\u0002\u0002\u01fb\u01fc\u0007l\u0002\u0002\u01fc\u01fe\u0003\u0002",
    "\u0002\u0002\u01fd\u01f8\u0003\u0002\u0002\u0002\u01fe\u0201\u0003\u0002",
    "\u0002\u0002\u01ff\u01fd\u0003\u0002\u0002\u0002\u01ff\u0200\u0003\u0002",
    "\u0002\u0002\u0200\u0203\u0003\u0002\u0002\u0002\u0201\u01ff\u0003\u0002",
    "\u0002\u0002\u0202\u01f5\u0003\u0002\u0002\u0002\u0202\u0203\u0003\u0002",
    "\u0002\u0002\u0203\u0204\u0003\u0002\u0002\u0002\u0204\u0205\u00075",
    "\u0002\u0002\u0205\u0207\u00074\u0002\u0002\u0206\u0208\u0005N(\u0002",
    "\u0207\u0206\u0003\u0002\u0002\u0002\u0207\u0208\u0003\u0002\u0002\u0002",
    "\u0208\u0209\u0003\u0002\u0002\u0002\u0209\u020a\u00075\u0002\u0002",
    "\u020a\u020c\u0003\u0002\u0002\u0002\u020b\u01ed\u0003\u0002\u0002\u0002",
    "\u020b\u01ee\u0003\u0002\u0002\u0002\u020b\u01f2\u0003\u0002\u0002\u0002",
    "\u020c=\u0003\u0002\u0002\u0002\u020d\u020f\u0005\u00b4[\u0002\u020e",
    "\u020d\u0003\u0002\u0002\u0002\u020e\u020f\u0003\u0002\u0002\u0002\u020f",
    "\u0210\u0003\u0002\u0002\u0002\u0210\u0211\u00052\u001a\u0002\u0211",
    "\u0212\u0007\u0011\u0002\u0002\u0212\u021c\u0005\u00a0Q\u0002\u0213",
    "\u0214\u0007\u0012\u0002\u0002\u0214\u0219\u0005L\'\u0002\u0215\u0216",
    "\u0007\u0007\u0002\u0002\u0216\u0218\u0005L\'\u0002\u0217\u0215\u0003",
    "\u0002\u0002\u0002\u0218\u021b\u0003\u0002\u0002\u0002\u0219\u0217\u0003",
    "\u0002\u0002\u0002\u0219\u021a\u0003\u0002\u0002\u0002\u021a\u021d\u0003",
    "\u0002\u0002\u0002\u021b\u0219\u0003\u0002\u0002\u0002\u021c\u0213\u0003",
    "\u0002\u0002\u0002\u021c\u021d\u0003\u0002\u0002\u0002\u021d\u0227\u0003",
    "\u0002\u0002\u0002\u021e\u021f\u00077\u0002\u0002\u021f\u0224\u0005",
    "L\'\u0002\u0220\u0221\u0007\u0007\u0002\u0002\u0221\u0223\u0005L\'\u0002",
    "\u0222\u0220\u0003\u0002\u0002\u0002\u0223\u0226\u0003\u0002\u0002\u0002",
    "\u0224\u0222\u0003\u0002\u0002\u0002\u0224\u0225\u0003\u0002\u0002\u0002",
    "\u0225\u0228\u0003\u0002\u0002\u0002\u0226\u0224\u0003\u0002\u0002\u0002",
    "\u0227\u021e\u0003\u0002\u0002\u0002\u0227\u0228\u0003\u0002\u0002\u0002",
    "\u0228\u0229\u0003\u0002\u0002\u0002\u0229\u022d\u0007\u0004\u0002\u0002",
    "\u022a\u022c\u0005@!\u0002\u022b\u022a\u0003\u0002\u0002\u0002\u022c",
    "\u022f\u0003\u0002\u0002\u0002\u022d\u022b\u0003\u0002\u0002\u0002\u022d",
    "\u022e\u0003\u0002\u0002\u0002\u022e\u0230\u0003\u0002\u0002\u0002\u022f",
    "\u022d\u0003\u0002\u0002\u0002\u0230\u0231\u0007\u0005\u0002\u0002\u0231",
    "?\u0003\u0002\u0002\u0002\u0232\u0236\u0005B\"\u0002\u0233\u0236\u0005",
    "0\u0019\u0002\u0234\u0236\u0005D#\u0002\u0235\u0232\u0003\u0002\u0002",
    "\u0002\u0235\u0233\u0003\u0002\u0002\u0002\u0235\u0234\u0003\u0002\u0002",
    "\u0002\u0236A\u0003\u0002\u0002\u0002\u0237\u0239\u0005\u00b4[\u0002",
    "\u0238\u0237\u0003\u0002\u0002\u0002\u0238\u0239\u0003\u0002\u0002\u0002",
    "\u0239\u023a\u0003\u0002\u0002\u0002\u023a\u023b\u00052\u001a\u0002",
    "\u023b\u023c\u0005\u00a0Q\u0002\u023c\u023d\u00074\u0002\u0002\u023d",
    "\u023e\u00075\u0002\u0002\u023e\u023f\u0007\u0004\u0002\u0002\u023f",
    "\u0240\u0005V,\u0002\u0240\u0241\u0007\u0005\u0002\u0002\u0241C\u0003",
    "\u0002\u0002\u0002\u0242\u0244\u0005\u00b4[\u0002\u0243\u0242\u0003",
    "\u0002\u0002\u0002\u0243\u0244\u0003\u0002\u0002\u0002\u0244\u0245\u0003",
    "\u0002\u0002\u0002\u0245\u0246\u00052\u001a\u0002\u0246\u0247\u0005",
    "T+\u0002\u0247\u0248\u0007\u0010\u0002\u0002\u0248E\u0003\u0002\u0002",
    "\u0002\u0249\u024a\b$\u0001\u0002\u024a\u024c\u0005\u009cO\u0002\u024b",
    "\u024d\u0005\u0012\n\u0002\u024c\u024b\u0003\u0002\u0002\u0002\u024c",
    "\u024d\u0003\u0002\u0002\u0002\u024d\u0256\u0003\u0002\u0002\u0002\u024e",
    "\u024f\f\u0003\u0002\u0002\u024f\u0250\u0007\r\u0002\u0002\u0250\u0252",
    "\u0005\u009cO\u0002\u0251\u0253\u0005\u0012\n\u0002\u0252\u0251\u0003",
    "\u0002\u0002\u0002\u0252\u0253\u0003\u0002\u0002\u0002\u0253\u0255\u0003",
    "\u0002\u0002\u0002\u0254\u024e\u0003\u0002\u0002\u0002\u0255\u0258\u0003",
    "\u0002\u0002\u0002\u0256\u0254\u0003\u0002\u0002\u0002\u0256\u0257\u0003",
    "\u0002\u0002\u0002\u0257G\u0003\u0002\u0002\u0002\u0258\u0256\u0003",
    "\u0002\u0002\u0002\u0259\u025a\u0005F$\u0002\u025a\u025b\u0007\r\u0002",
    "\u0002\u025b\u025d\u0003\u0002\u0002\u0002\u025c\u0259\u0003\u0002\u0002",
    "\u0002\u025c\u025d\u0003\u0002\u0002\u0002\u025d\u025e\u0003\u0002\u0002",
    "\u0002\u025e\u0260\u0005\u009eP\u0002\u025f\u0261\u0005\u0012\n\u0002",
    "\u0260\u025f\u0003\u0002\u0002\u0002\u0260\u0261\u0003\u0002\u0002\u0002",
    "\u0261I\u0003\u0002\u0002\u0002\u0262\u0263\u0005F$\u0002\u0263\u0264",
    "\u0007\r\u0002\u0002\u0264\u0266\u0003\u0002\u0002\u0002\u0265\u0262",
    "\u0003\u0002\u0002\u0002\u0265\u0266\u0003\u0002\u0002\u0002\u0266\u0267",
    "\u0003\u0002\u0002\u0002\u0267\u026b\u0005\u009aN\u0002\u0268\u0269",
    "\u0007\u000e\u0002\u0002\u0269\u026c\u0007l\u0002\u0002\u026a\u026c",
    "\u0005\u0012\n\u0002\u026b\u0268\u0003\u0002\u0002\u0002\u026b\u026a",
    "\u0003\u0002\u0002\u0002\u026b\u026c\u0003\u0002\u0002\u0002\u026cK",
    "\u0003\u0002\u0002\u0002\u026d\u026e\u0005F$\u0002\u026e\u026f\u0007",
    "\r\u0002\u0002\u026f\u0271\u0003\u0002\u0002\u0002\u0270\u026d\u0003",
    "\u0002\u0002\u0002\u0270\u0271\u0003\u0002\u0002\u0002\u0271\u0272\u0003",
    "\u0002\u0002\u0002\u0272\u027a\u0005\u00a0Q\u0002\u0273\u027a\u0005",
    "\u00a2R\u0002\u0274\u027a\u00078\u0002\u0002\u0275\u027a\u00079\u0002",
    "\u0002\u0276\u027a\u0007:\u0002\u0002\u0277\u027a\u0007;\u0002\u0002",
    "\u0278\u027a\u0007<\u0002\u0002\u0279\u0270\u0003\u0002\u0002\u0002",
    "\u0279\u0273\u0003\u0002\u0002\u0002\u0279\u0274\u0003\u0002\u0002\u0002",
    "\u0279\u0275\u0003\u0002\u0002\u0002\u0279\u0276\u0003\u0002\u0002\u0002",
    "\u0279\u0277\u0003\u0002\u0002\u0002\u0279\u0278\u0003\u0002\u0002\u0002",
    "\u027aM\u0003\u0002\u0002\u0002\u027b\u0280\u0005n8\u0002\u027c\u027d",
    "\u0007\u0007\u0002\u0002\u027d\u027f\u0005n8\u0002\u027e\u027c\u0003",
    "\u0002\u0002\u0002\u027f\u0282\u0003\u0002\u0002\u0002\u0280\u027e\u0003",
    "\u0002\u0002\u0002\u0280\u0281\u0003\u0002\u0002\u0002\u0281O\u0003",
    "\u0002\u0002\u0002\u0282\u0280\u0003\u0002\u0002\u0002\u0283\u0285\u0005",
    "\u00b4[\u0002\u0284\u0283\u0003\u0002\u0002\u0002\u0284\u0285\u0003",
    "\u0002\u0002\u0002\u0285\u0286\u0003\u0002\u0002\u0002\u0286\u0287\u0005",
    "2\u001a\u0002\u0287\u0288\u00073\u0002\u0002\u0288\u0289\u0005\u00ac",
    "W\u0002\u0289\u028a\u00076\u0002\u0002\u028a\u028b\u0005\u00a4S\u0002",
    "\u028b\u028c\u0007\u000e\u0002\u0002\u028c\u028d\u0007l\u0002\u0002",
    "\u028d\u028e\u0007\u0010\u0002\u0002\u028e\u02a4\u0003\u0002\u0002\u0002",
    "\u028f\u0291\u0005\u00b4[\u0002\u0290\u028f\u0003\u0002\u0002\u0002",
    "\u0290\u0291\u0003\u0002\u0002\u0002\u0291\u0292\u0003\u0002\u0002\u0002",
    "\u0292\u0293\u00052\u001a\u0002\u0293\u0294\u0007\u0011\u0002\u0002",
    "\u0294\u0295\u0005\u00a0Q\u0002\u0295\u0296\u00076\u0002\u0002\u0296",
    "\u0297\u0005L\'\u0002\u0297\u0298\u0007\u0010\u0002\u0002\u0298\u02a4",
    "\u0003\u0002\u0002\u0002\u0299\u029b\u0005\u00b4[\u0002\u029a\u0299",
    "\u0003\u0002\u0002\u0002\u029a\u029b\u0003\u0002\u0002\u0002\u029b\u029c",
    "\u0003\u0002\u0002\u0002\u029c\u029d\u00052\u001a\u0002\u029d\u029e",
    "\u0007\u0003\u0002\u0002\u029e\u029f\u0005\u009cO\u0002\u029f\u02a0",
    "\u00076\u0002\u0002\u02a0\u02a1\u0005F$\u0002\u02a1\u02a2\u0007\u0010",
    "\u0002\u0002\u02a2\u02a4\u0003\u0002\u0002\u0002\u02a3\u0284\u0003\u0002",
    "\u0002\u0002\u02a3\u0290\u0003\u0002\u0002\u0002\u02a3\u029a\u0003\u0002",
    "\u0002\u0002\u02a4Q\u0003\u0002\u0002\u0002\u02a5\u02aa\u0005T+\u0002",
    "\u02a6\u02a7\u0007\u0007\u0002\u0002\u02a7\u02a9\u0005T+\u0002\u02a8",
    "\u02a6\u0003\u0002\u0002\u0002\u02a9\u02ac\u0003\u0002\u0002\u0002\u02aa",
    "\u02a8\u0003\u0002\u0002\u0002\u02aa\u02ab\u0003\u0002\u0002\u0002\u02ab",
    "\u02ae\u0003\u0002\u0002\u0002\u02ac\u02aa\u0003\u0002\u0002\u0002\u02ad",
    "\u02a5\u0003\u0002\u0002\u0002\u02ad\u02ae\u0003\u0002\u0002\u0002\u02ae",
    "S\u0003\u0002\u0002\u0002\u02af\u02b0\u0005L\'\u0002\u02b0\u02b1\u0005",
    "\u00aeX\u0002\u02b1U\u0003\u0002\u0002\u0002\u02b2\u02b6\u0005X-\u0002",
    "\u02b3\u02b6\u0005Z.\u0002\u02b4\u02b6\u0005\\/\u0002\u02b5\u02b2\u0003",
    "\u0002\u0002\u0002\u02b5\u02b3\u0003\u0002\u0002\u0002\u02b5\u02b4\u0003",
    "\u0002\u0002\u0002\u02b6W\u0003\u0002\u0002\u0002\u02b7\u02b8\u0007",
    "=\u0002\u0002\u02b8\u02b9\u0005V,\u0002\u02b9\u02ba\u0007>\u0002\u0002",
    "\u02ba\u02bb\u0005V,\u0002\u02bb\u02bc\u0007?\u0002\u0002\u02bc\u02bd",
    "\u0005V,\u0002\u02bdY\u0003\u0002\u0002\u0002\u02be\u02c3\u0005^0\u0002",
    "\u02bf\u02c0\u0007@\u0002\u0002\u02c0\u02c2\u0005^0\u0002\u02c1\u02bf",
    "\u0003\u0002\u0002\u0002\u02c2\u02c5\u0003\u0002\u0002\u0002\u02c3\u02c1",
    "\u0003\u0002\u0002\u0002\u02c3\u02c4\u0003\u0002\u0002\u0002\u02c4[",
    "\u0003\u0002\u0002\u0002\u02c5\u02c3\u0003\u0002\u0002\u0002\u02c6\u02cb",
    "\u0005^0\u0002\u02c7\u02c8\u0007A\u0002\u0002\u02c8\u02ca\u0005^0\u0002",
    "\u02c9\u02c7\u0003\u0002\u0002\u0002\u02ca\u02cd\u0003\u0002\u0002\u0002",
    "\u02cb\u02c9\u0003\u0002\u0002\u0002\u02cb\u02cc\u0003\u0002\u0002\u0002",
    "\u02cc]\u0003\u0002\u0002\u0002\u02cd\u02cb\u0003\u0002\u0002\u0002",
    "\u02ce\u02d3\u0005`1\u0002\u02cf\u02d0\u0007B\u0002\u0002\u02d0\u02d2",
    "\u0005`1\u0002\u02d1\u02cf\u0003\u0002\u0002\u0002\u02d2\u02d5\u0003",
    "\u0002\u0002\u0002\u02d3\u02d1\u0003\u0002\u0002\u0002\u02d3\u02d4\u0003",
    "\u0002\u0002\u0002\u02d4_\u0003\u0002\u0002\u0002\u02d5\u02d3\u0003",
    "\u0002\u0002\u0002\u02d6\u02d7\u0007C\u0002\u0002\u02d7\u02da\u0005",
    "`1\u0002\u02d8\u02da\u0005b2\u0002\u02d9\u02d6\u0003\u0002\u0002\u0002",
    "\u02d9\u02d8\u0003\u0002\u0002\u0002\u02daa\u0003\u0002\u0002\u0002",
    "\u02db\u02dc\u0005n8\u0002\u02dc\u02dd\u0005d3\u0002\u02dd\u02de\u0005",
    "n8\u0002\u02dec\u0003\u0002\u0002\u0002\u02df\u02e0\t\u0005\u0002\u0002",
    "\u02e0e\u0003\u0002\u0002\u0002\u02e1\u02e2\u0005n8\u0002\u02e2\u02e3",
    "\u0007G\u0002\u0002\u02e3\u02e4\u0005L\'\u0002\u02e4g\u0003\u0002\u0002",
    "\u0002\u02e5\u02e6\u0005n8\u0002\u02e6\u02e9\u0007H\u0002\u0002\u02e7",
    "\u02ea\u0005\u0096L\u0002\u02e8\u02ea\u0005\u0098M\u0002\u02e9\u02e7",
    "\u0003\u0002\u0002\u0002\u02e9\u02e8\u0003\u0002\u0002\u0002\u02eai",
    "\u0003\u0002\u0002\u0002\u02eb\u02ed\u0005\u00a4S\u0002\u02ec\u02ee",
    "\u0005l7\u0002\u02ed\u02ec\u0003\u0002\u0002\u0002\u02ed\u02ee\u0003",
    "\u0002\u0002\u0002\u02ee\u02ef\u0003\u0002\u0002\u0002\u02ef\u02f1\u0007",
    "4\u0002\u0002\u02f0\u02f2\u0005N(\u0002\u02f1\u02f0\u0003\u0002\u0002",
    "\u0002\u02f1\u02f2\u0003\u0002\u0002\u0002\u02f2\u02f3\u0003\u0002\u0002",
    "\u0002\u02f3\u02f4\u00075\u0002\u0002\u02f4\u0302\u0003\u0002\u0002",
    "\u0002\u02f5\u02f6\u0005p9\u0002\u02f6\u02f7\u0007\f\u0002\u0002\u02f7",
    "\u02f9\u0005\u00a6T\u0002\u02f8\u02fa\u0005l7\u0002\u02f9\u02f8\u0003",
    "\u0002\u0002\u0002\u02f9\u02fa\u0003\u0002\u0002\u0002\u02fa\u02fb\u0003",
    "\u0002\u0002\u0002\u02fb\u02fd\u00074\u0002\u0002\u02fc\u02fe\u0005",
    "N(\u0002\u02fd\u02fc\u0003\u0002\u0002\u0002\u02fd\u02fe\u0003\u0002",
    "\u0002\u0002\u02fe\u02ff\u0003\u0002\u0002\u0002\u02ff\u0300\u00075",
    "\u0002\u0002\u0300\u0302\u0003\u0002\u0002\u0002\u0301\u02eb\u0003\u0002",
    "\u0002\u0002\u0301\u02f5\u0003\u0002\u0002\u0002\u0302k\u0003\u0002",
    "\u0002\u0002\u0303\u0304\t\u0006\u0002\u0002\u0304m\u0003\u0002\u0002",
    "\u0002\u0305\u030a\u0005p9\u0002\u0306\u0307\t\u0007\u0002\u0002\u0307",
    "\u0309\u0005p9\u0002\u0308\u0306\u0003\u0002\u0002\u0002\u0309\u030c",
    "\u0003\u0002\u0002\u0002\u030a\u0308\u0003\u0002\u0002\u0002\u030a\u030b",
    "\u0003\u0002\u0002\u0002\u030bo\u0003\u0002\u0002\u0002\u030c\u030a",
    "\u0003\u0002\u0002\u0002\u030d\u0311\u0005r:\u0002\u030e\u0310\u0005",
    "t;\u0002\u030f\u030e\u0003\u0002\u0002\u0002\u0310\u0313\u0003\u0002",
    "\u0002\u0002\u0311\u030f\u0003\u0002\u0002\u0002\u0311\u0312\u0003\u0002",
    "\u0002\u0002\u0312q\u0003\u0002\u0002\u0002\u0313\u0311\u0003\u0002",
    "\u0002\u0002\u0314\u0321\u0005|?\u0002\u0315\u0321\u0005v<\u0002\u0316",
    "\u0321\u0005x=\u0002\u0317\u0321\u0005~@\u0002\u0318\u0321\u0005\u0080",
    "A\u0002\u0319\u0321\u0005\u0082B\u0002\u031a\u0321\u0005z>\u0002\u031b",
    "\u0321\u0005\u0088E\u0002\u031c\u0321\u0005\u008aF\u0002\u031d\u0321",
    "\u0005\u0094K\u0002\u031e\u0321\u0005\u0096L\u0002\u031f\u0321\u0005",
    "\u0098M\u0002\u0320\u0314\u0003\u0002\u0002\u0002\u0320\u0315\u0003",
    "\u0002\u0002\u0002\u0320\u0316\u0003\u0002\u0002\u0002\u0320\u0317\u0003",
    "\u0002\u0002\u0002\u0320\u0318\u0003\u0002\u0002\u0002\u0320\u0319\u0003",
    "\u0002\u0002\u0002\u0320\u031a\u0003\u0002\u0002\u0002\u0320\u031b\u0003",
    "\u0002\u0002\u0002\u0320\u031c\u0003\u0002\u0002\u0002\u0320\u031d\u0003",
    "\u0002\u0002\u0002\u0320\u031e\u0003\u0002\u0002\u0002\u0320\u031f\u0003",
    "\u0002\u0002\u0002\u0321s\u0003\u0002\u0002\u0002\u0322\u0325\u0005",
    "\u0084C\u0002\u0323\u0325\u0005\u0086D\u0002\u0324\u0322\u0003\u0002",
    "\u0002\u0002\u0324\u0323\u0003\u0002\u0002\u0002\u0325u\u0003\u0002",
    "\u0002\u0002\u0326\u0327\t\b\u0002\u0002\u0327\u0328\u0005r:\u0002\u0328",
    "w\u0003\u0002\u0002\u0002\u0329\u032a\u00074\u0002\u0002\u032a\u032b",
    "\u0005L\'\u0002\u032b\u032c\u00075\u0002\u0002\u032c\u032d\u0005r:\u0002",
    "\u032dy\u0003\u0002\u0002\u0002\u032e\u032f\u00074\u0002\u0002\u032f",
    "\u0330\u0005n8\u0002\u0330\u0331\u00075\u0002\u0002\u0331{\u0003\u0002",
    "\u0002\u0002\u0332\u0333\u0007M\u0002\u0002\u0333}\u0003\u0002\u0002",
    "\u0002\u0334\u0335\t\t\u0002\u0002\u0335\u007f\u0003\u0002\u0002\u0002",
    "\u0336\u033a\u0005\u00aaV\u0002\u0337\u033a\u0007P\u0002\u0002\u0338",
    "\u033a\u0007Q\u0002\u0002\u0339\u0336\u0003\u0002\u0002\u0002\u0339",
    "\u0337\u0003\u0002\u0002\u0002\u0339\u0338\u0003\u0002\u0002\u0002\u033a",
    "\u0081\u0003\u0002\u0002\u0002\u033b\u0341\u0007R\u0002\u0002\u033c",
    "\u033d\u0005L\'\u0002\u033d\u033e\u0007\f\u0002\u0002\u033e\u033f\u0007",
    "R\u0002\u0002\u033f\u0341\u0003\u0002\u0002\u0002\u0340\u033b\u0003",
    "\u0002\u0002\u0002\u0340\u033c\u0003\u0002\u0002\u0002\u0341\u0083\u0003",
    "\u0002\u0002\u0002\u0342\u0343\u0007\f\u0002\u0002\u0343\u0344\u0007",
    "4\u0002\u0002\u0344\u0345\u0005L\'\u0002\u0345\u0346\u00075\u0002\u0002",
    "\u0346\u0085\u0003\u0002\u0002\u0002\u0347\u0349\u0005\u00a4S\u0002",
    "\u0348\u034a\u0005l7\u0002\u0349\u0348\u0003\u0002\u0002\u0002\u0349",
    "\u034a\u0003\u0002\u0002\u0002\u034a\u034b\u0003\u0002\u0002\u0002\u034b",
    "\u034d\u00074\u0002\u0002\u034c\u034e\u0005N(\u0002\u034d\u034c\u0003",
    "\u0002\u0002\u0002\u034d\u034e\u0003\u0002\u0002\u0002\u034e\u034f\u0003",
    "\u0002\u0002\u0002\u034f\u0350\u00075\u0002\u0002\u0350\u035d\u0003",
    "\u0002\u0002\u0002\u0351\u0352\u0007\f\u0002\u0002\u0352\u0354\u0005",
    "\u00a6T\u0002\u0353\u0355\u0005l7\u0002\u0354\u0353\u0003\u0002\u0002",
    "\u0002\u0354\u0355\u0003\u0002\u0002\u0002\u0355\u0356\u0003\u0002\u0002",
    "\u0002\u0356\u0358\u00074\u0002\u0002\u0357\u0359\u0005N(\u0002\u0358",
    "\u0357\u0003\u0002\u0002\u0002\u0358\u0359\u0003\u0002\u0002\u0002\u0359",
    "\u035a\u0003\u0002\u0002\u0002\u035a\u035b\u00075\u0002\u0002\u035b",
    "\u035d\u0003\u0002\u0002\u0002\u035c\u0347\u0003\u0002\u0002\u0002\u035c",
    "\u0351\u0003\u0002\u0002\u0002\u035d\u0087\u0003\u0002\u0002\u0002\u035e",
    "\u0363\u0005\u008eH\u0002\u035f\u0360\u0007(\u0002\u0002\u0360\u0361",
    "\u0005n8\u0002\u0361\u0362\u0007/\u0002\u0002\u0362\u0364\u0003\u0002",
    "\u0002\u0002\u0363\u035f\u0003\u0002\u0002\u0002\u0363\u0364\u0003\u0002",
    "\u0002\u0002\u0364\u0365\u0003\u0002\u0002\u0002\u0365\u0366\u00074",
    "\u0002\u0002\u0366\u0374\u0005R*\u0002\u0367\u0369\u0007S\u0002\u0002",
    "\u0368\u036a\u0005V,\u0002\u0369\u0368\u0003\u0002\u0002\u0002\u0369",
    "\u036a\u0003\u0002\u0002\u0002\u036a\u0372\u0003\u0002\u0002\u0002\u036b",
    "\u036c\u0007S\u0002\u0002\u036c\u0370\u0005(\u0015\u0002\u036d\u036e",
    "\u0007\u0017\u0002\u0002\u036e\u036f\u0007\u0018\u0002\u0002\u036f\u0371",
    "\u0005\u0090I\u0002\u0370\u036d\u0003\u0002\u0002\u0002\u0370\u0371",
    "\u0003\u0002\u0002\u0002\u0371\u0373\u0003\u0002\u0002\u0002\u0372\u036b",
    "\u0003\u0002\u0002\u0002\u0372\u0373\u0003\u0002\u0002\u0002\u0373\u0375",
    "\u0003\u0002\u0002\u0002\u0374\u0367\u0003\u0002\u0002\u0002\u0374\u0375",
    "\u0003\u0002\u0002\u0002\u0375\u0376\u0003\u0002\u0002\u0002\u0376\u0377",
    "\u00075\u0002\u0002\u0377\u0396\u0003\u0002\u0002\u0002\u0378\u037d",
    "\u0005\u008eH\u0002\u0379\u037a\u0007(\u0002\u0002\u037a\u037b\u0005",
    "n8\u0002\u037b\u037c\u0007/\u0002\u0002\u037c\u037e\u0003\u0002\u0002",
    "\u0002\u037d\u0379\u0003\u0002\u0002\u0002\u037d\u037e\u0003\u0002\u0002",
    "\u0002\u037e\u037f\u0003\u0002\u0002\u0002\u037f\u0380\u00074\u0002",
    "\u0002\u0380\u0384\u0005(\u0015\u0002\u0381\u0382\u0007\u0017\u0002",
    "\u0002\u0382\u0383\u0007\u0018\u0002\u0002\u0383\u0385\u0005\u0090I",
    "\u0002\u0384\u0381\u0003\u0002\u0002\u0002\u0384\u0385\u0003\u0002\u0002",
    "\u0002\u0385\u0386\u0003\u0002\u0002\u0002\u0386\u0387\u00075\u0002",
    "\u0002\u0387\u0396\u0003\u0002\u0002\u0002\u0388\u0389\u0007T\u0002",
    "\u0002\u0389\u038a\u00074\u0002\u0002\u038a\u038b\u0005R*\u0002\u038b",
    "\u038d\u0007S\u0002\u0002\u038c\u038e\u0005V,\u0002\u038d\u038c\u0003",
    "\u0002\u0002\u0002\u038d\u038e\u0003\u0002\u0002\u0002\u038e\u0391\u0003",
    "\u0002\u0002\u0002\u038f\u0390\u0007S\u0002\u0002\u0390\u0392\u0005",
    "(\u0015\u0002\u0391\u038f\u0003\u0002\u0002\u0002\u0391\u0392\u0003",
    "\u0002\u0002\u0002\u0392\u0393\u0003\u0002\u0002\u0002\u0393\u0394\u0007",
    "5\u0002\u0002\u0394\u0396\u0003\u0002\u0002\u0002\u0395\u035e\u0003",
    "\u0002\u0002\u0002\u0395\u0378\u0003\u0002\u0002\u0002\u0395\u0388\u0003",
    "\u0002\u0002\u0002\u0396\u0089\u0003\u0002\u0002\u0002\u0397\u0398\u0007",
    "\'\u0002\u0002\u0398\u0399\u0007(\u0002\u0002\u0399\u039a\u0005\u008c",
    "G\u0002\u039a\u039b\u0007/\u0002\u0002\u039b\u039c\u00074\u0002\u0002",
    "\u039c\u039d\u0005n8\u0002\u039d\u039e\u00075\u0002\u0002\u039e\u008b",
    "\u0003\u0002\u0002\u0002\u039f\u03a0\t\n\u0002\u0002\u03a0\u008d\u0003",
    "\u0002\u0002\u0002\u03a1\u03a2\t\u000b\u0002\u0002\u03a2\u008f\u0003",
    "\u0002\u0002\u0002\u03a3\u03a8\u0005\u0092J\u0002\u03a4\u03a5\u0007",
    "\u0007\u0002\u0002\u03a5\u03a7\u0005\u0092J\u0002\u03a6\u03a4\u0003",
    "\u0002\u0002\u0002\u03a7\u03aa\u0003\u0002\u0002\u0002\u03a8\u03a6\u0003",
    "\u0002\u0002\u0002\u03a8\u03a9\u0003\u0002\u0002\u0002\u03a9\u0091\u0003",
    "\u0002\u0002\u0002\u03aa\u03a8\u0003\u0002\u0002\u0002\u03ab\u03ad\u0005",
    "n8\u0002\u03ac\u03ae\t\u0002\u0002\u0002\u03ad\u03ac\u0003\u0002\u0002",
    "\u0002\u03ad\u03ae\u0003\u0002\u0002\u0002\u03ae\u0093\u0003\u0002\u0002",
    "\u0002\u03af\u03b0\u0007a\u0002\u0002\u03b0\u03b1\u00074\u0002\u0002",
    "\u03b1\u03ba\u0005R*\u0002\u03b2\u03b4\u0007S\u0002\u0002\u03b3\u03b5",
    "\u0005V,\u0002\u03b4\u03b3\u0003\u0002\u0002\u0002\u03b4\u03b5\u0003",
    "\u0002\u0002\u0002\u03b5\u03b8\u0003\u0002\u0002\u0002\u03b6\u03b7\u0007",
    "S\u0002\u0002\u03b7\u03b9\u0005n8\u0002\u03b8\u03b6\u0003\u0002\u0002",
    "\u0002\u03b8\u03b9\u0003\u0002\u0002\u0002\u03b9\u03bb\u0003\u0002\u0002",
    "\u0002\u03ba\u03b2\u0003\u0002\u0002\u0002\u03ba\u03bb\u0003\u0002\u0002",
    "\u0002\u03bb\u03bc\u0003\u0002\u0002\u0002\u03bc\u03bd\u00075\u0002",
    "\u0002\u03bd\u0095\u0003\u0002\u0002\u0002\u03be\u03bf\u0007(\u0002",
    "\u0002\u03bf\u03c0\u0005n8\u0002\u03c0\u03c1\u0007b\u0002\u0002\u03c1",
    "\u03c2\u0005n8\u0002\u03c2\u03c3\u0007/\u0002\u0002\u03c3\u0097\u0003",
    "\u0002\u0002\u0002\u03c4\u03c5\u0007(\u0002\u0002\u03c5\u03ca\u0005",
    "n8\u0002\u03c6\u03c7\u0007\u0007\u0002\u0002\u03c7\u03c9\u0005n8\u0002",
    "\u03c8\u03c6\u0003\u0002\u0002\u0002\u03c9\u03cc\u0003\u0002\u0002\u0002",
    "\u03ca\u03c8\u0003\u0002\u0002\u0002\u03ca\u03cb\u0003\u0002\u0002\u0002",
    "\u03cb\u03ce\u0003\u0002\u0002\u0002\u03cc\u03ca\u0003\u0002\u0002\u0002",
    "\u03cd\u03cf\u0007\u0007\u0002\u0002\u03ce\u03cd\u0003\u0002\u0002\u0002",
    "\u03ce\u03cf\u0003\u0002\u0002\u0002\u03cf\u03d0\u0003\u0002\u0002\u0002",
    "\u03d0\u03d1\u0007/\u0002\u0002\u03d1\u0099\u0003\u0002\u0002\u0002",
    "\u03d2\u03d5\u0005\u00aeX\u0002\u03d3\u03d5\u0005\u00b0Y\u0002\u03d4",
    "\u03d2\u0003\u0002\u0002\u0002\u03d4\u03d3\u0003\u0002\u0002\u0002\u03d5",
    "\u009b\u0003\u0002\u0002\u0002\u03d6\u03d7\u0005\u009aN\u0002\u03d7",
    "\u009d\u0003\u0002\u0002\u0002\u03d8\u03d9\u0005\u00b0Y\u0002\u03d9",
    "\u009f\u0003\u0002\u0002\u0002\u03da\u03db\u0005\u00b0Y\u0002\u03db",
    "\u00a1\u0003\u0002\u0002\u0002\u03dc\u03dd\u0005\u00b2Z\u0002\u03dd",
    "\u00a3\u0003\u0002\u0002\u0002\u03de\u03df\u0005F$\u0002\u03df\u03e0",
    "\u0007\r\u0002\u0002\u03e0\u03e2\u0003\u0002\u0002\u0002\u03e1\u03de",
    "\u0003\u0002\u0002\u0002\u03e1\u03e2\u0003\u0002\u0002\u0002\u03e2\u03e3",
    "\u0003\u0002\u0002\u0002\u03e3\u03e4\u0005\u00acW\u0002\u03e4\u00a5",
    "\u0003\u0002\u0002\u0002\u03e5\u03e6\u0005\u00aeX\u0002\u03e6\u00a7",
    "\u0003\u0002\u0002\u0002\u03e7\u03e8\u0005\u009aN\u0002\u03e8\u00a9",
    "\u0003\u0002\u0002\u0002\u03e9\u03ea\u0005\u00aeX\u0002\u03ea\u00ab",
    "\u0003\u0002\u0002\u0002\u03eb\u03f0\u0005\u00aeX\u0002\u03ec\u03f0",
    "\u0005\u00b2Z\u0002\u03ed\u03f0\u0007a\u0002\u0002\u03ee\u03f0\u0007",
    "c\u0002\u0002\u03ef\u03eb\u0003\u0002\u0002\u0002\u03ef\u03ec\u0003",
    "\u0002\u0002\u0002\u03ef\u03ed\u0003\u0002\u0002\u0002\u03ef\u03ee\u0003",
    "\u0002\u0002\u0002\u03f0\u00ad\u0003\u0002\u0002\u0002\u03f1\u03f5\u0007",
    "g\u0002\u0002\u03f2\u03f4\t\f\u0002\u0002\u03f3\u03f2\u0003\u0002\u0002",
    "\u0002\u03f4\u03f7\u0003\u0002\u0002\u0002\u03f5\u03f3\u0003\u0002\u0002",
    "\u0002\u03f5\u03f6\u0003\u0002\u0002\u0002\u03f6\u00af\u0003\u0002\u0002",
    "\u0002\u03f7\u03f5\u0003\u0002\u0002\u0002\u03f8\u03fc\u0007h\u0002",
    "\u0002\u03f9\u03fb\t\f\u0002\u0002\u03fa\u03f9\u0003\u0002\u0002\u0002",
    "\u03fb\u03fe\u0003\u0002\u0002\u0002\u03fc\u03fa\u0003\u0002\u0002\u0002",
    "\u03fc\u03fd\u0003\u0002\u0002\u0002\u03fd\u00b1\u0003\u0002\u0002\u0002",
    "\u03fe\u03fc\u0003\u0002\u0002\u0002\u03ff\u0400\u0007d\u0002\u0002",
    "\u0400\u0401\u0005\u00aeX\u0002\u0401\u00b3\u0003\u0002\u0002\u0002",
    "\u0402\u0406\u0007e\u0002\u0002\u0403\u0405\u000b\u0002\u0002\u0002",
    "\u0404\u0403\u0003\u0002\u0002\u0002\u0405\u0408\u0003\u0002\u0002\u0002",
    "\u0406\u0407\u0003\u0002\u0002\u0002\u0406\u0404\u0003\u0002\u0002\u0002",
    "\u0407\u0409\u0003\u0002\u0002\u0002\u0408\u0406\u0003\u0002\u0002\u0002",
    "\u0409\u040a\u0007f\u0002\u0002\u040a\u00b5\u0003\u0002\u0002\u0002",
    "z\u00b7\u00be\u00c4\u00c7\u00d6\u00e1\u00ea\u00ec\u00f4\u00fe\u0108",
    "\u010c\u0115\u0120\u0125\u0128\u0130\u013c\u013f\u0146\u014a\u014d\u0152",
    "\u0159\u0162\u0164\u0168\u016f\u0179\u0184\u0187\u018d\u0194\u0198\u019f",
    "\u01a6\u01ac\u01b3\u01b8\u01bb\u01c4\u01c9\u01dc\u01df\u01e2\u01e6\u01ff",
    "\u0202\u0207\u020b\u020e\u0219\u021c\u0224\u0227\u022d\u0235\u0238\u0243",
    "\u024c\u0252\u0256\u025c\u0260\u0265\u026b\u0270\u0279\u0280\u0284\u0290",
    "\u029a\u02a3\u02aa\u02ad\u02b5\u02c3\u02cb\u02d3\u02d9\u02e9\u02ed\u02f1",
    "\u02f9\u02fd\u0301\u030a\u0311\u0320\u0324\u0339\u0340\u0349\u034d\u0354",
    "\u0358\u035c\u0363\u0369\u0370\u0372\u0374\u037d\u0384\u038d\u0391\u0395",
    "\u03a8\u03ad\u03b4\u03b8\u03ba\u03ca\u03ce\u03d4\u03e1\u03ef\u03f5\u03fc",
    "\u0406"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'module'", "'{'", "'}'", "'<'", "','", "'>'", 
                     "'implements'", "'import'", "'as'", "'.'", "'::'", 
                     "'/'", "'signature'", "';'", "'class'", "'extends'", 
                     "'default'", "'from'", "'where'", "'select'", "'order'", 
                     "'by'", "'asc'", "'desc'", "'abstract'", "'cached'", 
                     "'external'", "'extensible'", "'final'", "'transient'", 
                     "'library'", "'private'", "'deprecated'", "'override'", 
                     "'additional'", "'query'", "'pragma'", "'['", "'inline'", 
                     "'inline_late'", "'noinline'", "'nomagic'", "'noopt'", 
                     "'assume_small_delta'", "']'", "'language'", "'monotonicAggregates'", 
                     "'bindingset'", "'predicate'", "'('", "')'", "'='", 
                     "'instanceofClause'", "'boolean'", "'date'", "'float'", 
                     "'int'", "'string'", "'if'", "'then'", "'else'", "'implies'", 
                     "'or'", "'and'", "'not'", "'!='", "'<='", "'>='", "'instanceof'", 
                     "'in'", "'*'", "'+'", "'-'", "'%'", "'_'", "'false'", 
                     "'true'", "'this'", "'result'", "'super'", "'|'", "'unique'", 
                     "'only_bind_out'", "'only_bind_into'", "'avg'", "'concat'", 
                     "'count'", "'max'", "'min'", "'rank'", "'strictconcat'", 
                     "'strictcount'", "'strictsum'", "'sum'", "'any'", "'..'", 
                     "'none'", "'@'", "'/*'", "'*/'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, "LOWERCASE_LETTER", "UPPERCASE_LETTER", 
                      "DIGIT", "QSTRING", "STRING", "INT", "FLOAT", "WS", 
                      "COMMENT", "LINE_COMMENT" ];

var ruleNames =  [ "ql", "module", "parameters", "implementsClause", "moduleBody", 
                   "importDef", "qualId", "importModuleExpr", "arguments", 
                   "argument", "signature", "predicateSignature", "typeSignature", 
                   "moduleSignature", "moduleSignatureBody", "signaturePredicate", 
                   "defaultPredicate", "signatureType", "select", "as_exprs", 
                   "as_expr", "orderbys", "orderby", "predicate", "annotations", 
                   "annotation", "simpleAnnotation", "argsAnnotation", "head", 
                   "optbody", "classDef", "member", "character", "field", 
                   "moduleExpr", "moduleSignatureExpr", "signatureExpr", 
                   "type", "exprs", "alias", "var_decls", "var_decl", "formula", 
                   "ifthen", "implies", "disjunction", "conjunction", "negated", 
                   "comparison", "compop", "instanceofClause", "inrange", 
                   "call", "closure", "expr", "primary", "basePrimary", 
                   "postfix", "unop", "cast", "eparen", "dontcare", "literal", 
                   "variable", "super_expr", "postfix_cast", "callwithresults", 
                   "aggregation", "expression_pragma", "expression_pragma_type", 
                   "aggid", "aggorderbys", "aggorderby", "any", "range", 
                   "setliteral", "simpleId", "modulename", "moduleSignatureName", 
                   "classname", "dbasetype", "predicateRef", "predicateName", 
                   "parameterName", "varname", "literalId", "lowerId", "upperId", 
                   "atLowerId", "qldoc" ];

function CodeQLParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

CodeQLParser.prototype = Object.create(antlr4.Parser.prototype);
CodeQLParser.prototype.constructor = CodeQLParser;

Object.defineProperty(CodeQLParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

CodeQLParser.EOF = antlr4.Token.EOF;
CodeQLParser.T__0 = 1;
CodeQLParser.T__1 = 2;
CodeQLParser.T__2 = 3;
CodeQLParser.T__3 = 4;
CodeQLParser.T__4 = 5;
CodeQLParser.T__5 = 6;
CodeQLParser.T__6 = 7;
CodeQLParser.T__7 = 8;
CodeQLParser.T__8 = 9;
CodeQLParser.T__9 = 10;
CodeQLParser.T__10 = 11;
CodeQLParser.T__11 = 12;
CodeQLParser.T__12 = 13;
CodeQLParser.T__13 = 14;
CodeQLParser.T__14 = 15;
CodeQLParser.T__15 = 16;
CodeQLParser.T__16 = 17;
CodeQLParser.T__17 = 18;
CodeQLParser.T__18 = 19;
CodeQLParser.T__19 = 20;
CodeQLParser.T__20 = 21;
CodeQLParser.T__21 = 22;
CodeQLParser.T__22 = 23;
CodeQLParser.T__23 = 24;
CodeQLParser.T__24 = 25;
CodeQLParser.T__25 = 26;
CodeQLParser.T__26 = 27;
CodeQLParser.T__27 = 28;
CodeQLParser.T__28 = 29;
CodeQLParser.T__29 = 30;
CodeQLParser.T__30 = 31;
CodeQLParser.T__31 = 32;
CodeQLParser.T__32 = 33;
CodeQLParser.T__33 = 34;
CodeQLParser.T__34 = 35;
CodeQLParser.T__35 = 36;
CodeQLParser.T__36 = 37;
CodeQLParser.T__37 = 38;
CodeQLParser.T__38 = 39;
CodeQLParser.T__39 = 40;
CodeQLParser.T__40 = 41;
CodeQLParser.T__41 = 42;
CodeQLParser.T__42 = 43;
CodeQLParser.T__43 = 44;
CodeQLParser.T__44 = 45;
CodeQLParser.T__45 = 46;
CodeQLParser.T__46 = 47;
CodeQLParser.T__47 = 48;
CodeQLParser.T__48 = 49;
CodeQLParser.T__49 = 50;
CodeQLParser.T__50 = 51;
CodeQLParser.T__51 = 52;
CodeQLParser.T__52 = 53;
CodeQLParser.T__53 = 54;
CodeQLParser.T__54 = 55;
CodeQLParser.T__55 = 56;
CodeQLParser.T__56 = 57;
CodeQLParser.T__57 = 58;
CodeQLParser.T__58 = 59;
CodeQLParser.T__59 = 60;
CodeQLParser.T__60 = 61;
CodeQLParser.T__61 = 62;
CodeQLParser.T__62 = 63;
CodeQLParser.T__63 = 64;
CodeQLParser.T__64 = 65;
CodeQLParser.T__65 = 66;
CodeQLParser.T__66 = 67;
CodeQLParser.T__67 = 68;
CodeQLParser.T__68 = 69;
CodeQLParser.T__69 = 70;
CodeQLParser.T__70 = 71;
CodeQLParser.T__71 = 72;
CodeQLParser.T__72 = 73;
CodeQLParser.T__73 = 74;
CodeQLParser.T__74 = 75;
CodeQLParser.T__75 = 76;
CodeQLParser.T__76 = 77;
CodeQLParser.T__77 = 78;
CodeQLParser.T__78 = 79;
CodeQLParser.T__79 = 80;
CodeQLParser.T__80 = 81;
CodeQLParser.T__81 = 82;
CodeQLParser.T__82 = 83;
CodeQLParser.T__83 = 84;
CodeQLParser.T__84 = 85;
CodeQLParser.T__85 = 86;
CodeQLParser.T__86 = 87;
CodeQLParser.T__87 = 88;
CodeQLParser.T__88 = 89;
CodeQLParser.T__89 = 90;
CodeQLParser.T__90 = 91;
CodeQLParser.T__91 = 92;
CodeQLParser.T__92 = 93;
CodeQLParser.T__93 = 94;
CodeQLParser.T__94 = 95;
CodeQLParser.T__95 = 96;
CodeQLParser.T__96 = 97;
CodeQLParser.T__97 = 98;
CodeQLParser.T__98 = 99;
CodeQLParser.T__99 = 100;
CodeQLParser.LOWERCASE_LETTER = 101;
CodeQLParser.UPPERCASE_LETTER = 102;
CodeQLParser.DIGIT = 103;
CodeQLParser.QSTRING = 104;
CodeQLParser.STRING = 105;
CodeQLParser.INT = 106;
CodeQLParser.FLOAT = 107;
CodeQLParser.WS = 108;
CodeQLParser.COMMENT = 109;
CodeQLParser.LINE_COMMENT = 110;

CodeQLParser.RULE_ql = 0;
CodeQLParser.RULE_module = 1;
CodeQLParser.RULE_parameters = 2;
CodeQLParser.RULE_implementsClause = 3;
CodeQLParser.RULE_moduleBody = 4;
CodeQLParser.RULE_importDef = 5;
CodeQLParser.RULE_qualId = 6;
CodeQLParser.RULE_importModuleExpr = 7;
CodeQLParser.RULE_arguments = 8;
CodeQLParser.RULE_argument = 9;
CodeQLParser.RULE_signature = 10;
CodeQLParser.RULE_predicateSignature = 11;
CodeQLParser.RULE_typeSignature = 12;
CodeQLParser.RULE_moduleSignature = 13;
CodeQLParser.RULE_moduleSignatureBody = 14;
CodeQLParser.RULE_signaturePredicate = 15;
CodeQLParser.RULE_defaultPredicate = 16;
CodeQLParser.RULE_signatureType = 17;
CodeQLParser.RULE_select = 18;
CodeQLParser.RULE_as_exprs = 19;
CodeQLParser.RULE_as_expr = 20;
CodeQLParser.RULE_orderbys = 21;
CodeQLParser.RULE_orderby = 22;
CodeQLParser.RULE_predicate = 23;
CodeQLParser.RULE_annotations = 24;
CodeQLParser.RULE_annotation = 25;
CodeQLParser.RULE_simpleAnnotation = 26;
CodeQLParser.RULE_argsAnnotation = 27;
CodeQLParser.RULE_head = 28;
CodeQLParser.RULE_optbody = 29;
CodeQLParser.RULE_classDef = 30;
CodeQLParser.RULE_member = 31;
CodeQLParser.RULE_character = 32;
CodeQLParser.RULE_field = 33;
CodeQLParser.RULE_moduleExpr = 34;
CodeQLParser.RULE_moduleSignatureExpr = 35;
CodeQLParser.RULE_signatureExpr = 36;
CodeQLParser.RULE_type = 37;
CodeQLParser.RULE_exprs = 38;
CodeQLParser.RULE_alias = 39;
CodeQLParser.RULE_var_decls = 40;
CodeQLParser.RULE_var_decl = 41;
CodeQLParser.RULE_formula = 42;
CodeQLParser.RULE_ifthen = 43;
CodeQLParser.RULE_implies = 44;
CodeQLParser.RULE_disjunction = 45;
CodeQLParser.RULE_conjunction = 46;
CodeQLParser.RULE_negated = 47;
CodeQLParser.RULE_comparison = 48;
CodeQLParser.RULE_compop = 49;
CodeQLParser.RULE_instanceofClause = 50;
CodeQLParser.RULE_inrange = 51;
CodeQLParser.RULE_call = 52;
CodeQLParser.RULE_closure = 53;
CodeQLParser.RULE_expr = 54;
CodeQLParser.RULE_primary = 55;
CodeQLParser.RULE_basePrimary = 56;
CodeQLParser.RULE_postfix = 57;
CodeQLParser.RULE_unop = 58;
CodeQLParser.RULE_cast = 59;
CodeQLParser.RULE_eparen = 60;
CodeQLParser.RULE_dontcare = 61;
CodeQLParser.RULE_literal = 62;
CodeQLParser.RULE_variable = 63;
CodeQLParser.RULE_super_expr = 64;
CodeQLParser.RULE_postfix_cast = 65;
CodeQLParser.RULE_callwithresults = 66;
CodeQLParser.RULE_aggregation = 67;
CodeQLParser.RULE_expression_pragma = 68;
CodeQLParser.RULE_expression_pragma_type = 69;
CodeQLParser.RULE_aggid = 70;
CodeQLParser.RULE_aggorderbys = 71;
CodeQLParser.RULE_aggorderby = 72;
CodeQLParser.RULE_any = 73;
CodeQLParser.RULE_range = 74;
CodeQLParser.RULE_setliteral = 75;
CodeQLParser.RULE_simpleId = 76;
CodeQLParser.RULE_modulename = 77;
CodeQLParser.RULE_moduleSignatureName = 78;
CodeQLParser.RULE_classname = 79;
CodeQLParser.RULE_dbasetype = 80;
CodeQLParser.RULE_predicateRef = 81;
CodeQLParser.RULE_predicateName = 82;
CodeQLParser.RULE_parameterName = 83;
CodeQLParser.RULE_varname = 84;
CodeQLParser.RULE_literalId = 85;
CodeQLParser.RULE_lowerId = 86;
CodeQLParser.RULE_upperId = 87;
CodeQLParser.RULE_atLowerId = 88;
CodeQLParser.RULE_qldoc = 89;

function QlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_ql;
    return this;
}

QlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QlContext.prototype.constructor = QlContext;

QlContext.prototype.moduleBody = function() {
    return this.getTypedRuleContext(ModuleBodyContext,0);
};

QlContext.prototype.qldoc = function() {
    return this.getTypedRuleContext(QldocContext,0);
};

QlContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterQl(this);
	}
};

QlContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitQl(this);
	}
};

QlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitQl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.QlContext = QlContext;

CodeQLParser.prototype.ql = function() {

    var localctx = new QlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, CodeQLParser.RULE_ql);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 181;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
        if(la_===1) {
            this.state = 180;
            this.qldoc();

        }
        this.state = 183;
        this.moduleBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_module;
    return this;
}

ModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleContext.prototype.constructor = ModuleContext;

ModuleContext.prototype.modulename = function() {
    return this.getTypedRuleContext(ModulenameContext,0);
};

ModuleContext.prototype.moduleBody = function() {
    return this.getTypedRuleContext(ModuleBodyContext,0);
};

ModuleContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

ModuleContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

ModuleContext.prototype.implementsClause = function() {
    return this.getTypedRuleContext(ImplementsClauseContext,0);
};

ModuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterModule(this);
	}
};

ModuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitModule(this);
	}
};

ModuleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitModule(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.ModuleContext = ModuleContext;

CodeQLParser.prototype.module = function() {

    var localctx = new ModuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, CodeQLParser.RULE_module);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 188;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (CodeQLParser.T__24 - 25)) | (1 << (CodeQLParser.T__25 - 25)) | (1 << (CodeQLParser.T__26 - 25)) | (1 << (CodeQLParser.T__27 - 25)) | (1 << (CodeQLParser.T__28 - 25)) | (1 << (CodeQLParser.T__29 - 25)) | (1 << (CodeQLParser.T__30 - 25)) | (1 << (CodeQLParser.T__31 - 25)) | (1 << (CodeQLParser.T__32 - 25)) | (1 << (CodeQLParser.T__33 - 25)) | (1 << (CodeQLParser.T__34 - 25)) | (1 << (CodeQLParser.T__35 - 25)) | (1 << (CodeQLParser.T__36 - 25)) | (1 << (CodeQLParser.T__45 - 25)) | (1 << (CodeQLParser.T__47 - 25)))) !== 0)) {
            this.state = 185;
            this.annotation();
            this.state = 190;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 191;
        this.match(CodeQLParser.T__0);
        this.state = 192;
        this.modulename();
        this.state = 194;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__3) {
            this.state = 193;
            this.parameters();
        }

        this.state = 197;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__6) {
            this.state = 196;
            this.implementsClause();
        }

        this.state = 199;
        this.match(CodeQLParser.T__1);
        this.state = 200;
        this.moduleBody();
        this.state = 201;
        this.match(CodeQLParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_parameters;
    return this;
}

ParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParametersContext.prototype.constructor = ParametersContext;

ParametersContext.prototype.signatureExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SignatureExprContext);
    } else {
        return this.getTypedRuleContext(SignatureExprContext,i);
    }
};

ParametersContext.prototype.parameterName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterNameContext);
    } else {
        return this.getTypedRuleContext(ParameterNameContext,i);
    }
};

ParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterParameters(this);
	}
};

ParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitParameters(this);
	}
};

ParametersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitParameters(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.ParametersContext = ParametersContext;

CodeQLParser.prototype.parameters = function() {

    var localctx = new ParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, CodeQLParser.RULE_parameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 203;
        this.match(CodeQLParser.T__3);
        this.state = 204;
        this.signatureExpr();
        this.state = 205;
        this.parameterName();
        this.state = 212;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CodeQLParser.T__4) {
            this.state = 206;
            this.match(CodeQLParser.T__4);
            this.state = 207;
            this.signatureExpr();
            this.state = 208;
            this.parameterName();
            this.state = 214;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 215;
        this.match(CodeQLParser.T__5);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImplementsClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_implementsClause;
    return this;
}

ImplementsClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImplementsClauseContext.prototype.constructor = ImplementsClauseContext;

ImplementsClauseContext.prototype.moduleSignatureExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModuleSignatureExprContext);
    } else {
        return this.getTypedRuleContext(ModuleSignatureExprContext,i);
    }
};

ImplementsClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterImplementsClause(this);
	}
};

ImplementsClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitImplementsClause(this);
	}
};

ImplementsClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitImplementsClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.ImplementsClauseContext = ImplementsClauseContext;

CodeQLParser.prototype.implementsClause = function() {

    var localctx = new ImplementsClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, CodeQLParser.RULE_implementsClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 217;
        this.match(CodeQLParser.T__6);
        this.state = 218;
        this.moduleSignatureExpr();
        this.state = 223;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CodeQLParser.T__4) {
            this.state = 219;
            this.match(CodeQLParser.T__4);
            this.state = 220;
            this.moduleSignatureExpr();
            this.state = 225;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuleBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_moduleBody;
    return this;
}

ModuleBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleBodyContext.prototype.constructor = ModuleBodyContext;

ModuleBodyContext.prototype.importDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportDefContext);
    } else {
        return this.getTypedRuleContext(ImportDefContext,i);
    }
};

ModuleBodyContext.prototype.predicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PredicateContext);
    } else {
        return this.getTypedRuleContext(PredicateContext,i);
    }
};

ModuleBodyContext.prototype.classDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassDefContext);
    } else {
        return this.getTypedRuleContext(ClassDefContext,i);
    }
};

ModuleBodyContext.prototype.module = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModuleContext);
    } else {
        return this.getTypedRuleContext(ModuleContext,i);
    }
};

ModuleBodyContext.prototype.alias = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AliasContext);
    } else {
        return this.getTypedRuleContext(AliasContext,i);
    }
};

ModuleBodyContext.prototype.select = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectContext);
    } else {
        return this.getTypedRuleContext(SelectContext,i);
    }
};

ModuleBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterModuleBody(this);
	}
};

ModuleBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitModuleBody(this);
	}
};

ModuleBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitModuleBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.ModuleBodyContext = ModuleBodyContext;

CodeQLParser.prototype.moduleBody = function() {

    var localctx = new ModuleBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, CodeQLParser.RULE_moduleBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 234;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CodeQLParser.T__0) | (1 << CodeQLParser.T__7) | (1 << CodeQLParser.T__14) | (1 << CodeQLParser.T__17) | (1 << CodeQLParser.T__18) | (1 << CodeQLParser.T__19) | (1 << CodeQLParser.T__24) | (1 << CodeQLParser.T__25) | (1 << CodeQLParser.T__26) | (1 << CodeQLParser.T__27) | (1 << CodeQLParser.T__28) | (1 << CodeQLParser.T__29) | (1 << CodeQLParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CodeQLParser.T__31 - 32)) | (1 << (CodeQLParser.T__32 - 32)) | (1 << (CodeQLParser.T__33 - 32)) | (1 << (CodeQLParser.T__34 - 32)) | (1 << (CodeQLParser.T__35 - 32)) | (1 << (CodeQLParser.T__36 - 32)) | (1 << (CodeQLParser.T__45 - 32)) | (1 << (CodeQLParser.T__47 - 32)) | (1 << (CodeQLParser.T__48 - 32)) | (1 << (CodeQLParser.T__53 - 32)) | (1 << (CodeQLParser.T__54 - 32)) | (1 << (CodeQLParser.T__55 - 32)) | (1 << (CodeQLParser.T__56 - 32)) | (1 << (CodeQLParser.T__57 - 32)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CodeQLParser.T__97 - 98)) | (1 << (CodeQLParser.T__98 - 98)) | (1 << (CodeQLParser.LOWERCASE_LETTER - 98)) | (1 << (CodeQLParser.UPPERCASE_LETTER - 98)))) !== 0)) {
            this.state = 232;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
            switch(la_) {
            case 1:
                this.state = 226;
                this.importDef();
                break;

            case 2:
                this.state = 227;
                this.predicate();
                break;

            case 3:
                this.state = 228;
                this.classDef();
                break;

            case 4:
                this.state = 229;
                this.module();
                break;

            case 5:
                this.state = 230;
                this.alias();
                break;

            case 6:
                this.state = 231;
                this.select();
                break;

            }
            this.state = 236;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportDefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_importDef;
    return this;
}

ImportDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDefContext.prototype.constructor = ImportDefContext;

ImportDefContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

ImportDefContext.prototype.importModuleExpr = function() {
    return this.getTypedRuleContext(ImportModuleExprContext,0);
};

ImportDefContext.prototype.modulename = function() {
    return this.getTypedRuleContext(ModulenameContext,0);
};

ImportDefContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterImportDef(this);
	}
};

ImportDefContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitImportDef(this);
	}
};

ImportDefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitImportDef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.ImportDefContext = ImportDefContext;

CodeQLParser.prototype.importDef = function() {

    var localctx = new ImportDefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, CodeQLParser.RULE_importDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 237;
        this.annotations();
        this.state = 238;
        this.match(CodeQLParser.T__7);
        this.state = 239;
        this.importModuleExpr(0);
        this.state = 242;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__8) {
            this.state = 240;
            this.match(CodeQLParser.T__8);
            this.state = 241;
            this.modulename();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_qualId;
    return this;
}

QualIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualIdContext.prototype.constructor = QualIdContext;

QualIdContext.prototype.simpleId = function() {
    return this.getTypedRuleContext(SimpleIdContext,0);
};

QualIdContext.prototype.qualId = function() {
    return this.getTypedRuleContext(QualIdContext,0);
};

QualIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterQualId(this);
	}
};

QualIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitQualId(this);
	}
};

QualIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitQualId(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CodeQLParser.prototype.qualId = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new QualIdContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 12;
    this.enterRecursionRule(localctx, 12, CodeQLParser.RULE_qualId, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 245;
        this.simpleId();
        this._ctx.stop = this._input.LT(-1);
        this.state = 252;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new QualIdContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CodeQLParser.RULE_qualId);
                this.state = 247;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 248;
                this.match(CodeQLParser.T__9);
                this.state = 249;
                this.simpleId(); 
            }
            this.state = 254;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ImportModuleExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_importModuleExpr;
    return this;
}

ImportModuleExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportModuleExprContext.prototype.constructor = ImportModuleExprContext;

ImportModuleExprContext.prototype.qualId = function() {
    return this.getTypedRuleContext(QualIdContext,0);
};

ImportModuleExprContext.prototype.importModuleExpr = function() {
    return this.getTypedRuleContext(ImportModuleExprContext,0);
};

ImportModuleExprContext.prototype.modulename = function() {
    return this.getTypedRuleContext(ModulenameContext,0);
};

ImportModuleExprContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

ImportModuleExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterImportModuleExpr(this);
	}
};

ImportModuleExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitImportModuleExpr(this);
	}
};

ImportModuleExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitImportModuleExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CodeQLParser.prototype.importModuleExpr = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ImportModuleExprContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 14;
    this.enterRecursionRule(localctx, 14, CodeQLParser.RULE_importModuleExpr, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 256;
        this.qualId(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 266;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,11,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ImportModuleExprContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CodeQLParser.RULE_importModuleExpr);
                this.state = 258;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 259;
                this.match(CodeQLParser.T__10);
                this.state = 260;
                this.modulename();
                this.state = 262;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
                if(la_===1) {
                    this.state = 261;
                    this.arguments();

                } 
            }
            this.state = 268;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,11,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_arguments;
    return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentContext);
    } else {
        return this.getTypedRuleContext(ArgumentContext,i);
    }
};

ArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterArguments(this);
	}
};

ArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitArguments(this);
	}
};

ArgumentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitArguments(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.ArgumentsContext = ArgumentsContext;

CodeQLParser.prototype.arguments = function() {

    var localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, CodeQLParser.RULE_arguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 269;
        this.match(CodeQLParser.T__3);
        this.state = 270;
        this.argument();
        this.state = 275;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CodeQLParser.T__4) {
            this.state = 271;
            this.match(CodeQLParser.T__4);
            this.state = 272;
            this.argument();
            this.state = 277;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 278;
        this.match(CodeQLParser.T__5);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_argument;
    return this;
}

ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentContext.prototype.constructor = ArgumentContext;

ArgumentContext.prototype.moduleExpr = function() {
    return this.getTypedRuleContext(ModuleExprContext,0);
};

ArgumentContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ArgumentContext.prototype.predicateRef = function() {
    return this.getTypedRuleContext(PredicateRefContext,0);
};

ArgumentContext.prototype.INT = function() {
    return this.getToken(CodeQLParser.INT, 0);
};

ArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterArgument(this);
	}
};

ArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitArgument(this);
	}
};

ArgumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitArgument(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.ArgumentContext = ArgumentContext;

CodeQLParser.prototype.argument = function() {

    var localctx = new ArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, CodeQLParser.RULE_argument);
    try {
        this.state = 286;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 280;
            this.moduleExpr(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 281;
            this.type();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 282;
            this.predicateRef();
            this.state = 283;
            this.match(CodeQLParser.T__11);
            this.state = 284;
            this.match(CodeQLParser.INT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SignatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_signature;
    return this;
}

SignatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignatureContext.prototype.constructor = SignatureContext;

SignatureContext.prototype.predicateSignature = function() {
    return this.getTypedRuleContext(PredicateSignatureContext,0);
};

SignatureContext.prototype.typeSignature = function() {
    return this.getTypedRuleContext(TypeSignatureContext,0);
};

SignatureContext.prototype.moduleSignature = function() {
    return this.getTypedRuleContext(ModuleSignatureContext,0);
};

SignatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterSignature(this);
	}
};

SignatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitSignature(this);
	}
};

SignatureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitSignature(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.SignatureContext = SignatureContext;

CodeQLParser.prototype.signature = function() {

    var localctx = new SignatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, CodeQLParser.RULE_signature);
    try {
        this.state = 291;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 288;
            this.predicateSignature();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 289;
            this.typeSignature();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 290;
            this.moduleSignature();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PredicateSignatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_predicateSignature;
    return this;
}

PredicateSignatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateSignatureContext.prototype.constructor = PredicateSignatureContext;

PredicateSignatureContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

PredicateSignatureContext.prototype.head = function() {
    return this.getTypedRuleContext(HeadContext,0);
};

PredicateSignatureContext.prototype.qldoc = function() {
    return this.getTypedRuleContext(QldocContext,0);
};

PredicateSignatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterPredicateSignature(this);
	}
};

PredicateSignatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitPredicateSignature(this);
	}
};

PredicateSignatureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitPredicateSignature(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.PredicateSignatureContext = PredicateSignatureContext;

CodeQLParser.prototype.predicateSignature = function() {

    var localctx = new PredicateSignatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, CodeQLParser.RULE_predicateSignature);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 294;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__98) {
            this.state = 293;
            this.qldoc();
        }

        this.state = 296;
        this.annotations();
        this.state = 297;
        this.match(CodeQLParser.T__12);
        this.state = 298;
        this.head();
        this.state = 299;
        this.match(CodeQLParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeSignatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_typeSignature;
    return this;
}

TypeSignatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSignatureContext.prototype.constructor = TypeSignatureContext;

TypeSignatureContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

TypeSignatureContext.prototype.classname = function() {
    return this.getTypedRuleContext(ClassnameContext,0);
};

TypeSignatureContext.prototype.qldoc = function() {
    return this.getTypedRuleContext(QldocContext,0);
};

TypeSignatureContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

TypeSignatureContext.prototype.signaturePredicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SignaturePredicateContext);
    } else {
        return this.getTypedRuleContext(SignaturePredicateContext,i);
    }
};

TypeSignatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterTypeSignature(this);
	}
};

TypeSignatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitTypeSignature(this);
	}
};

TypeSignatureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitTypeSignature(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.TypeSignatureContext = TypeSignatureContext;

CodeQLParser.prototype.typeSignature = function() {

    var localctx = new TypeSignatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, CodeQLParser.RULE_typeSignature);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 302;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__98) {
            this.state = 301;
            this.qldoc();
        }

        this.state = 304;
        this.annotations();
        this.state = 305;
        this.match(CodeQLParser.T__12);
        this.state = 306;
        this.match(CodeQLParser.T__14);
        this.state = 307;
        this.classname();
        this.state = 317;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__15) {
            this.state = 308;
            this.match(CodeQLParser.T__15);
            this.state = 309;
            this.type();
            this.state = 314;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CodeQLParser.T__4) {
                this.state = 310;
                this.match(CodeQLParser.T__4);
                this.state = 311;
                this.type();
                this.state = 316;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 328;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CodeQLParser.T__13:
            this.state = 319;
            this.match(CodeQLParser.T__13);
            break;
        case CodeQLParser.T__1:
            this.state = 320;
            this.match(CodeQLParser.T__1);
            this.state = 324;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CodeQLParser.T__24) | (1 << CodeQLParser.T__25) | (1 << CodeQLParser.T__26) | (1 << CodeQLParser.T__27) | (1 << CodeQLParser.T__28) | (1 << CodeQLParser.T__29) | (1 << CodeQLParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CodeQLParser.T__31 - 32)) | (1 << (CodeQLParser.T__32 - 32)) | (1 << (CodeQLParser.T__33 - 32)) | (1 << (CodeQLParser.T__34 - 32)) | (1 << (CodeQLParser.T__35 - 32)) | (1 << (CodeQLParser.T__36 - 32)) | (1 << (CodeQLParser.T__45 - 32)) | (1 << (CodeQLParser.T__47 - 32)) | (1 << (CodeQLParser.T__48 - 32)) | (1 << (CodeQLParser.T__53 - 32)) | (1 << (CodeQLParser.T__54 - 32)) | (1 << (CodeQLParser.T__55 - 32)) | (1 << (CodeQLParser.T__56 - 32)) | (1 << (CodeQLParser.T__57 - 32)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CodeQLParser.T__97 - 98)) | (1 << (CodeQLParser.T__98 - 98)) | (1 << (CodeQLParser.LOWERCASE_LETTER - 98)) | (1 << (CodeQLParser.UPPERCASE_LETTER - 98)))) !== 0)) {
                this.state = 321;
                this.signaturePredicate();
                this.state = 326;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 327;
            this.match(CodeQLParser.T__2);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuleSignatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_moduleSignature;
    return this;
}

ModuleSignatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleSignatureContext.prototype.constructor = ModuleSignatureContext;

ModuleSignatureContext.prototype.moduleSignatureName = function() {
    return this.getTypedRuleContext(ModuleSignatureNameContext,0);
};

ModuleSignatureContext.prototype.moduleSignatureBody = function() {
    return this.getTypedRuleContext(ModuleSignatureBodyContext,0);
};

ModuleSignatureContext.prototype.qldoc = function() {
    return this.getTypedRuleContext(QldocContext,0);
};

ModuleSignatureContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

ModuleSignatureContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

ModuleSignatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterModuleSignature(this);
	}
};

ModuleSignatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitModuleSignature(this);
	}
};

ModuleSignatureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitModuleSignature(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.ModuleSignatureContext = ModuleSignatureContext;

CodeQLParser.prototype.moduleSignature = function() {

    var localctx = new ModuleSignatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, CodeQLParser.RULE_moduleSignature);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 331;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__98) {
            this.state = 330;
            this.qldoc();
        }

        this.state = 336;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (CodeQLParser.T__24 - 25)) | (1 << (CodeQLParser.T__25 - 25)) | (1 << (CodeQLParser.T__26 - 25)) | (1 << (CodeQLParser.T__27 - 25)) | (1 << (CodeQLParser.T__28 - 25)) | (1 << (CodeQLParser.T__29 - 25)) | (1 << (CodeQLParser.T__30 - 25)) | (1 << (CodeQLParser.T__31 - 25)) | (1 << (CodeQLParser.T__32 - 25)) | (1 << (CodeQLParser.T__33 - 25)) | (1 << (CodeQLParser.T__34 - 25)) | (1 << (CodeQLParser.T__35 - 25)) | (1 << (CodeQLParser.T__36 - 25)) | (1 << (CodeQLParser.T__45 - 25)) | (1 << (CodeQLParser.T__47 - 25)))) !== 0)) {
            this.state = 333;
            this.annotation();
            this.state = 338;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 339;
        this.match(CodeQLParser.T__12);
        this.state = 340;
        this.match(CodeQLParser.T__0);
        this.state = 341;
        this.moduleSignatureName();
        this.state = 343;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__3) {
            this.state = 342;
            this.parameters();
        }

        this.state = 345;
        this.match(CodeQLParser.T__1);
        this.state = 346;
        this.moduleSignatureBody();
        this.state = 347;
        this.match(CodeQLParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuleSignatureBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_moduleSignatureBody;
    return this;
}

ModuleSignatureBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleSignatureBodyContext.prototype.constructor = ModuleSignatureBodyContext;

ModuleSignatureBodyContext.prototype.signaturePredicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SignaturePredicateContext);
    } else {
        return this.getTypedRuleContext(SignaturePredicateContext,i);
    }
};

ModuleSignatureBodyContext.prototype.defaultPredicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DefaultPredicateContext);
    } else {
        return this.getTypedRuleContext(DefaultPredicateContext,i);
    }
};

ModuleSignatureBodyContext.prototype.signatureType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SignatureTypeContext);
    } else {
        return this.getTypedRuleContext(SignatureTypeContext,i);
    }
};

ModuleSignatureBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterModuleSignatureBody(this);
	}
};

ModuleSignatureBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitModuleSignatureBody(this);
	}
};

ModuleSignatureBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitModuleSignatureBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.ModuleSignatureBodyContext = ModuleSignatureBodyContext;

CodeQLParser.prototype.moduleSignatureBody = function() {

    var localctx = new ModuleSignatureBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, CodeQLParser.RULE_moduleSignatureBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 354;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CodeQLParser.T__14) | (1 << CodeQLParser.T__16) | (1 << CodeQLParser.T__24) | (1 << CodeQLParser.T__25) | (1 << CodeQLParser.T__26) | (1 << CodeQLParser.T__27) | (1 << CodeQLParser.T__28) | (1 << CodeQLParser.T__29) | (1 << CodeQLParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CodeQLParser.T__31 - 32)) | (1 << (CodeQLParser.T__32 - 32)) | (1 << (CodeQLParser.T__33 - 32)) | (1 << (CodeQLParser.T__34 - 32)) | (1 << (CodeQLParser.T__35 - 32)) | (1 << (CodeQLParser.T__36 - 32)) | (1 << (CodeQLParser.T__45 - 32)) | (1 << (CodeQLParser.T__47 - 32)) | (1 << (CodeQLParser.T__48 - 32)) | (1 << (CodeQLParser.T__53 - 32)) | (1 << (CodeQLParser.T__54 - 32)) | (1 << (CodeQLParser.T__55 - 32)) | (1 << (CodeQLParser.T__56 - 32)) | (1 << (CodeQLParser.T__57 - 32)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CodeQLParser.T__97 - 98)) | (1 << (CodeQLParser.T__98 - 98)) | (1 << (CodeQLParser.LOWERCASE_LETTER - 98)) | (1 << (CodeQLParser.UPPERCASE_LETTER - 98)))) !== 0)) {
            this.state = 352;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
            switch(la_) {
            case 1:
                this.state = 349;
                this.signaturePredicate();
                break;

            case 2:
                this.state = 350;
                this.defaultPredicate();
                break;

            case 3:
                this.state = 351;
                this.signatureType();
                break;

            }
            this.state = 356;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SignaturePredicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_signaturePredicate;
    return this;
}

SignaturePredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignaturePredicateContext.prototype.constructor = SignaturePredicateContext;

SignaturePredicateContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

SignaturePredicateContext.prototype.head = function() {
    return this.getTypedRuleContext(HeadContext,0);
};

SignaturePredicateContext.prototype.qldoc = function() {
    return this.getTypedRuleContext(QldocContext,0);
};

SignaturePredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterSignaturePredicate(this);
	}
};

SignaturePredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitSignaturePredicate(this);
	}
};

SignaturePredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitSignaturePredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.SignaturePredicateContext = SignaturePredicateContext;

CodeQLParser.prototype.signaturePredicate = function() {

    var localctx = new SignaturePredicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, CodeQLParser.RULE_signaturePredicate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 358;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__98) {
            this.state = 357;
            this.qldoc();
        }

        this.state = 360;
        this.annotations();
        this.state = 361;
        this.head();
        this.state = 362;
        this.match(CodeQLParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DefaultPredicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_defaultPredicate;
    return this;
}

DefaultPredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultPredicateContext.prototype.constructor = DefaultPredicateContext;

DefaultPredicateContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

DefaultPredicateContext.prototype.head = function() {
    return this.getTypedRuleContext(HeadContext,0);
};

DefaultPredicateContext.prototype.formula = function() {
    return this.getTypedRuleContext(FormulaContext,0);
};

DefaultPredicateContext.prototype.qldoc = function() {
    return this.getTypedRuleContext(QldocContext,0);
};

DefaultPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterDefaultPredicate(this);
	}
};

DefaultPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitDefaultPredicate(this);
	}
};

DefaultPredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitDefaultPredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.DefaultPredicateContext = DefaultPredicateContext;

CodeQLParser.prototype.defaultPredicate = function() {

    var localctx = new DefaultPredicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, CodeQLParser.RULE_defaultPredicate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 365;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__98) {
            this.state = 364;
            this.qldoc();
        }

        this.state = 367;
        this.annotations();
        this.state = 368;
        this.match(CodeQLParser.T__16);
        this.state = 369;
        this.head();
        this.state = 370;
        this.match(CodeQLParser.T__1);
        this.state = 371;
        this.formula();
        this.state = 372;
        this.match(CodeQLParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SignatureTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_signatureType;
    return this;
}

SignatureTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignatureTypeContext.prototype.constructor = SignatureTypeContext;

SignatureTypeContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

SignatureTypeContext.prototype.classname = function() {
    return this.getTypedRuleContext(ClassnameContext,0);
};

SignatureTypeContext.prototype.qldoc = function() {
    return this.getTypedRuleContext(QldocContext,0);
};

SignatureTypeContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

SignatureTypeContext.prototype.signaturePredicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SignaturePredicateContext);
    } else {
        return this.getTypedRuleContext(SignaturePredicateContext,i);
    }
};

SignatureTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterSignatureType(this);
	}
};

SignatureTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitSignatureType(this);
	}
};

SignatureTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitSignatureType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.SignatureTypeContext = SignatureTypeContext;

CodeQLParser.prototype.signatureType = function() {

    var localctx = new SignatureTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, CodeQLParser.RULE_signatureType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 375;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__98) {
            this.state = 374;
            this.qldoc();
        }

        this.state = 377;
        this.annotations();
        this.state = 378;
        this.match(CodeQLParser.T__14);
        this.state = 379;
        this.classname();
        this.state = 389;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__15) {
            this.state = 380;
            this.match(CodeQLParser.T__15);
            this.state = 381;
            this.type();
            this.state = 386;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CodeQLParser.T__4) {
                this.state = 382;
                this.match(CodeQLParser.T__4);
                this.state = 383;
                this.type();
                this.state = 388;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 391;
        this.match(CodeQLParser.T__1);
        this.state = 395;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CodeQLParser.T__24) | (1 << CodeQLParser.T__25) | (1 << CodeQLParser.T__26) | (1 << CodeQLParser.T__27) | (1 << CodeQLParser.T__28) | (1 << CodeQLParser.T__29) | (1 << CodeQLParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CodeQLParser.T__31 - 32)) | (1 << (CodeQLParser.T__32 - 32)) | (1 << (CodeQLParser.T__33 - 32)) | (1 << (CodeQLParser.T__34 - 32)) | (1 << (CodeQLParser.T__35 - 32)) | (1 << (CodeQLParser.T__36 - 32)) | (1 << (CodeQLParser.T__45 - 32)) | (1 << (CodeQLParser.T__47 - 32)) | (1 << (CodeQLParser.T__48 - 32)) | (1 << (CodeQLParser.T__53 - 32)) | (1 << (CodeQLParser.T__54 - 32)) | (1 << (CodeQLParser.T__55 - 32)) | (1 << (CodeQLParser.T__56 - 32)) | (1 << (CodeQLParser.T__57 - 32)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CodeQLParser.T__97 - 98)) | (1 << (CodeQLParser.T__98 - 98)) | (1 << (CodeQLParser.LOWERCASE_LETTER - 98)) | (1 << (CodeQLParser.UPPERCASE_LETTER - 98)))) !== 0)) {
            this.state = 392;
            this.signaturePredicate();
            this.state = 397;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 398;
        this.match(CodeQLParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_select;
    return this;
}

SelectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectContext.prototype.constructor = SelectContext;

SelectContext.prototype.as_exprs = function() {
    return this.getTypedRuleContext(As_exprsContext,0);
};

SelectContext.prototype.var_decls = function() {
    return this.getTypedRuleContext(Var_declsContext,0);
};

SelectContext.prototype.formula = function() {
    return this.getTypedRuleContext(FormulaContext,0);
};

SelectContext.prototype.orderbys = function() {
    return this.getTypedRuleContext(OrderbysContext,0);
};

SelectContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterSelect(this);
	}
};

SelectContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitSelect(this);
	}
};

SelectContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitSelect(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.SelectContext = SelectContext;

CodeQLParser.prototype.select = function() {

    var localctx = new SelectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, CodeQLParser.RULE_select);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 402;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__17) {
            this.state = 400;
            this.match(CodeQLParser.T__17);
            this.state = 401;
            this.var_decls();
        }

        this.state = 406;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__18) {
            this.state = 404;
            this.match(CodeQLParser.T__18);
            this.state = 405;
            this.formula();
        }

        this.state = 408;
        this.match(CodeQLParser.T__19);
        this.state = 409;
        this.as_exprs();
        this.state = 413;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__20) {
            this.state = 410;
            this.match(CodeQLParser.T__20);
            this.state = 411;
            this.match(CodeQLParser.T__21);
            this.state = 412;
            this.orderbys();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function As_exprsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_as_exprs;
    return this;
}

As_exprsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
As_exprsContext.prototype.constructor = As_exprsContext;

As_exprsContext.prototype.as_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(As_exprContext);
    } else {
        return this.getTypedRuleContext(As_exprContext,i);
    }
};

As_exprsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterAs_exprs(this);
	}
};

As_exprsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitAs_exprs(this);
	}
};

As_exprsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitAs_exprs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.As_exprsContext = As_exprsContext;

CodeQLParser.prototype.as_exprs = function() {

    var localctx = new As_exprsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, CodeQLParser.RULE_as_exprs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 415;
        this.as_expr();
        this.state = 420;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CodeQLParser.T__4) {
            this.state = 416;
            this.match(CodeQLParser.T__4);
            this.state = 417;
            this.as_expr();
            this.state = 422;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function As_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_as_expr;
    return this;
}

As_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
As_exprContext.prototype.constructor = As_exprContext;

As_exprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

As_exprContext.prototype.lowerId = function() {
    return this.getTypedRuleContext(LowerIdContext,0);
};

As_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterAs_expr(this);
	}
};

As_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitAs_expr(this);
	}
};

As_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitAs_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.As_exprContext = As_exprContext;

CodeQLParser.prototype.as_expr = function() {

    var localctx = new As_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, CodeQLParser.RULE_as_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 423;
        this.expr();
        this.state = 426;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__8) {
            this.state = 424;
            this.match(CodeQLParser.T__8);
            this.state = 425;
            this.lowerId();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrderbysContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_orderbys;
    return this;
}

OrderbysContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderbysContext.prototype.constructor = OrderbysContext;

OrderbysContext.prototype.orderby = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OrderbyContext);
    } else {
        return this.getTypedRuleContext(OrderbyContext,i);
    }
};

OrderbysContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterOrderbys(this);
	}
};

OrderbysContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitOrderbys(this);
	}
};

OrderbysContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitOrderbys(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.OrderbysContext = OrderbysContext;

CodeQLParser.prototype.orderbys = function() {

    var localctx = new OrderbysContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, CodeQLParser.RULE_orderbys);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 428;
        this.orderby();
        this.state = 433;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CodeQLParser.T__4) {
            this.state = 429;
            this.match(CodeQLParser.T__4);
            this.state = 430;
            this.orderby();
            this.state = 435;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrderbyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_orderby;
    return this;
}

OrderbyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderbyContext.prototype.constructor = OrderbyContext;

OrderbyContext.prototype.lowerId = function() {
    return this.getTypedRuleContext(LowerIdContext,0);
};

OrderbyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterOrderby(this);
	}
};

OrderbyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitOrderby(this);
	}
};

OrderbyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitOrderby(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.OrderbyContext = OrderbyContext;

CodeQLParser.prototype.orderby = function() {

    var localctx = new OrderbyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, CodeQLParser.RULE_orderby);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 436;
        this.lowerId();
        this.state = 438;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__22 || _la===CodeQLParser.T__23) {
            this.state = 437;
            _la = this._input.LA(1);
            if(!(_la===CodeQLParser.T__22 || _la===CodeQLParser.T__23)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PredicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_predicate;
    return this;
}

PredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateContext.prototype.constructor = PredicateContext;

PredicateContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

PredicateContext.prototype.head = function() {
    return this.getTypedRuleContext(HeadContext,0);
};

PredicateContext.prototype.optbody = function() {
    return this.getTypedRuleContext(OptbodyContext,0);
};

PredicateContext.prototype.qldoc = function() {
    return this.getTypedRuleContext(QldocContext,0);
};

PredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterPredicate(this);
	}
};

PredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitPredicate(this);
	}
};

PredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitPredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.PredicateContext = PredicateContext;

CodeQLParser.prototype.predicate = function() {

    var localctx = new PredicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, CodeQLParser.RULE_predicate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 441;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__98) {
            this.state = 440;
            this.qldoc();
        }

        this.state = 443;
        this.annotations();
        this.state = 444;
        this.head();
        this.state = 445;
        this.optbody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_annotations;
    return this;
}

AnnotationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationsContext.prototype.constructor = AnnotationsContext;

AnnotationsContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

AnnotationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterAnnotations(this);
	}
};

AnnotationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitAnnotations(this);
	}
};

AnnotationsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitAnnotations(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.AnnotationsContext = AnnotationsContext;

CodeQLParser.prototype.annotations = function() {

    var localctx = new AnnotationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, CodeQLParser.RULE_annotations);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 450;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (CodeQLParser.T__24 - 25)) | (1 << (CodeQLParser.T__25 - 25)) | (1 << (CodeQLParser.T__26 - 25)) | (1 << (CodeQLParser.T__27 - 25)) | (1 << (CodeQLParser.T__28 - 25)) | (1 << (CodeQLParser.T__29 - 25)) | (1 << (CodeQLParser.T__30 - 25)) | (1 << (CodeQLParser.T__31 - 25)) | (1 << (CodeQLParser.T__32 - 25)) | (1 << (CodeQLParser.T__33 - 25)) | (1 << (CodeQLParser.T__34 - 25)) | (1 << (CodeQLParser.T__35 - 25)) | (1 << (CodeQLParser.T__36 - 25)) | (1 << (CodeQLParser.T__45 - 25)) | (1 << (CodeQLParser.T__47 - 25)))) !== 0)) {
            this.state = 447;
            this.annotation();
            this.state = 452;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_annotation;
    return this;
}

AnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationContext.prototype.constructor = AnnotationContext;

AnnotationContext.prototype.simpleAnnotation = function() {
    return this.getTypedRuleContext(SimpleAnnotationContext,0);
};

AnnotationContext.prototype.argsAnnotation = function() {
    return this.getTypedRuleContext(ArgsAnnotationContext,0);
};

AnnotationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterAnnotation(this);
	}
};

AnnotationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitAnnotation(this);
	}
};

AnnotationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitAnnotation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.AnnotationContext = AnnotationContext;

CodeQLParser.prototype.annotation = function() {

    var localctx = new AnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, CodeQLParser.RULE_annotation);
    try {
        this.state = 455;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CodeQLParser.T__24:
        case CodeQLParser.T__25:
        case CodeQLParser.T__26:
        case CodeQLParser.T__27:
        case CodeQLParser.T__28:
        case CodeQLParser.T__29:
        case CodeQLParser.T__30:
        case CodeQLParser.T__31:
        case CodeQLParser.T__32:
        case CodeQLParser.T__33:
        case CodeQLParser.T__34:
        case CodeQLParser.T__35:
            this.enterOuterAlt(localctx, 1);
            this.state = 453;
            this.simpleAnnotation();
            break;
        case CodeQLParser.T__36:
        case CodeQLParser.T__45:
        case CodeQLParser.T__47:
            this.enterOuterAlt(localctx, 2);
            this.state = 454;
            this.argsAnnotation();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SimpleAnnotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_simpleAnnotation;
    return this;
}

SimpleAnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleAnnotationContext.prototype.constructor = SimpleAnnotationContext;


SimpleAnnotationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterSimpleAnnotation(this);
	}
};

SimpleAnnotationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitSimpleAnnotation(this);
	}
};

SimpleAnnotationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitSimpleAnnotation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.SimpleAnnotationContext = SimpleAnnotationContext;

CodeQLParser.prototype.simpleAnnotation = function() {

    var localctx = new SimpleAnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, CodeQLParser.RULE_simpleAnnotation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 457;
        _la = this._input.LA(1);
        if(!(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (CodeQLParser.T__24 - 25)) | (1 << (CodeQLParser.T__25 - 25)) | (1 << (CodeQLParser.T__26 - 25)) | (1 << (CodeQLParser.T__27 - 25)) | (1 << (CodeQLParser.T__28 - 25)) | (1 << (CodeQLParser.T__29 - 25)) | (1 << (CodeQLParser.T__30 - 25)) | (1 << (CodeQLParser.T__31 - 25)) | (1 << (CodeQLParser.T__32 - 25)) | (1 << (CodeQLParser.T__33 - 25)) | (1 << (CodeQLParser.T__34 - 25)) | (1 << (CodeQLParser.T__35 - 25)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgsAnnotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_argsAnnotation;
    return this;
}

ArgsAnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgsAnnotationContext.prototype.constructor = ArgsAnnotationContext;

ArgsAnnotationContext.prototype.variable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableContext);
    } else {
        return this.getTypedRuleContext(VariableContext,i);
    }
};

ArgsAnnotationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterArgsAnnotation(this);
	}
};

ArgsAnnotationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitArgsAnnotation(this);
	}
};

ArgsAnnotationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitArgsAnnotation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.ArgsAnnotationContext = ArgsAnnotationContext;

CodeQLParser.prototype.argsAnnotation = function() {

    var localctx = new ArgsAnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, CodeQLParser.RULE_argsAnnotation);
    var _la = 0; // Token type
    try {
        this.state = 480;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CodeQLParser.T__36:
            this.enterOuterAlt(localctx, 1);
            this.state = 459;
            this.match(CodeQLParser.T__36);
            this.state = 460;
            this.match(CodeQLParser.T__37);
            this.state = 461;
            _la = this._input.LA(1);
            if(!(((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CodeQLParser.T__38 - 39)) | (1 << (CodeQLParser.T__39 - 39)) | (1 << (CodeQLParser.T__40 - 39)) | (1 << (CodeQLParser.T__41 - 39)) | (1 << (CodeQLParser.T__42 - 39)) | (1 << (CodeQLParser.T__43 - 39)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 462;
            this.match(CodeQLParser.T__44);
            break;
        case CodeQLParser.T__45:
            this.enterOuterAlt(localctx, 2);
            this.state = 463;
            this.match(CodeQLParser.T__45);
            this.state = 464;
            this.match(CodeQLParser.T__37);
            this.state = 465;
            this.match(CodeQLParser.T__46);
            this.state = 466;
            this.match(CodeQLParser.T__44);
            break;
        case CodeQLParser.T__47:
            this.enterOuterAlt(localctx, 3);
            this.state = 467;
            this.match(CodeQLParser.T__47);
            this.state = 468;
            this.match(CodeQLParser.T__37);
            this.state = 477;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (CodeQLParser.T__77 - 78)) | (1 << (CodeQLParser.T__78 - 78)) | (1 << (CodeQLParser.LOWERCASE_LETTER - 78)))) !== 0)) {
                this.state = 469;
                this.variable();
                this.state = 474;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===CodeQLParser.T__4) {
                    this.state = 470;
                    this.match(CodeQLParser.T__4);
                    this.state = 471;
                    this.variable();
                    this.state = 476;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 479;
            this.match(CodeQLParser.T__44);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HeadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_head;
    return this;
}

HeadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HeadContext.prototype.constructor = HeadContext;

HeadContext.prototype.predicateName = function() {
    return this.getTypedRuleContext(PredicateNameContext,0);
};

HeadContext.prototype.var_decls = function() {
    return this.getTypedRuleContext(Var_declsContext,0);
};

HeadContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

HeadContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterHead(this);
	}
};

HeadContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitHead(this);
	}
};

HeadContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitHead(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.HeadContext = HeadContext;

CodeQLParser.prototype.head = function() {

    var localctx = new HeadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, CodeQLParser.RULE_head);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 484;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CodeQLParser.T__48:
            this.state = 482;
            this.match(CodeQLParser.T__48);
            break;
        case CodeQLParser.T__53:
        case CodeQLParser.T__54:
        case CodeQLParser.T__55:
        case CodeQLParser.T__56:
        case CodeQLParser.T__57:
        case CodeQLParser.T__97:
        case CodeQLParser.LOWERCASE_LETTER:
        case CodeQLParser.UPPERCASE_LETTER:
            this.state = 483;
            this.type();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 486;
        this.predicateName();
        this.state = 487;
        this.match(CodeQLParser.T__49);
        this.state = 488;
        this.var_decls();
        this.state = 489;
        this.match(CodeQLParser.T__50);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OptbodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_optbody;
    return this;
}

OptbodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptbodyContext.prototype.constructor = OptbodyContext;

OptbodyContext.prototype.formula = function() {
    return this.getTypedRuleContext(FormulaContext,0);
};

OptbodyContext.prototype.literalId = function() {
    return this.getTypedRuleContext(LiteralIdContext,0);
};

OptbodyContext.prototype.predicateRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PredicateRefContext);
    } else {
        return this.getTypedRuleContext(PredicateRefContext,i);
    }
};

OptbodyContext.prototype.INT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CodeQLParser.INT);
    } else {
        return this.getToken(CodeQLParser.INT, i);
    }
};


OptbodyContext.prototype.exprs = function() {
    return this.getTypedRuleContext(ExprsContext,0);
};

OptbodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterOptbody(this);
	}
};

OptbodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitOptbody(this);
	}
};

OptbodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitOptbody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.OptbodyContext = OptbodyContext;

CodeQLParser.prototype.optbody = function() {

    var localctx = new OptbodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, CodeQLParser.RULE_optbody);
    var _la = 0; // Token type
    try {
        this.state = 521;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CodeQLParser.T__13:
            this.enterOuterAlt(localctx, 1);
            this.state = 491;
            this.match(CodeQLParser.T__13);
            break;
        case CodeQLParser.T__1:
            this.enterOuterAlt(localctx, 2);
            this.state = 492;
            this.match(CodeQLParser.T__1);
            this.state = 493;
            this.formula();
            this.state = 494;
            this.match(CodeQLParser.T__2);
            break;
        case CodeQLParser.T__51:
            this.enterOuterAlt(localctx, 3);
            this.state = 496;
            this.match(CodeQLParser.T__51);
            this.state = 497;
            this.literalId();
            this.state = 498;
            this.match(CodeQLParser.T__49);
            this.state = 512;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 95)) & ~0x1f) == 0 && ((1 << (_la - 95)) & ((1 << (CodeQLParser.T__94 - 95)) | (1 << (CodeQLParser.T__96 - 95)) | (1 << (CodeQLParser.T__97 - 95)) | (1 << (CodeQLParser.LOWERCASE_LETTER - 95)) | (1 << (CodeQLParser.UPPERCASE_LETTER - 95)))) !== 0)) {
                this.state = 499;
                this.predicateRef();
                this.state = 500;
                this.match(CodeQLParser.T__11);
                this.state = 501;
                this.match(CodeQLParser.INT);
                this.state = 509;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===CodeQLParser.T__4) {
                    this.state = 502;
                    this.match(CodeQLParser.T__4);
                    this.state = 503;
                    this.predicateRef();
                    this.state = 504;
                    this.match(CodeQLParser.T__11);
                    this.state = 505;
                    this.match(CodeQLParser.INT);
                    this.state = 511;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 514;
            this.match(CodeQLParser.T__50);
            this.state = 515;
            this.match(CodeQLParser.T__49);
            this.state = 517;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (CodeQLParser.T__36 - 37)) | (1 << (CodeQLParser.T__37 - 37)) | (1 << (CodeQLParser.T__49 - 37)) | (1 << (CodeQLParser.T__53 - 37)) | (1 << (CodeQLParser.T__54 - 37)) | (1 << (CodeQLParser.T__55 - 37)) | (1 << (CodeQLParser.T__56 - 37)) | (1 << (CodeQLParser.T__57 - 37)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CodeQLParser.T__71 - 72)) | (1 << (CodeQLParser.T__72 - 72)) | (1 << (CodeQLParser.T__74 - 72)) | (1 << (CodeQLParser.T__75 - 72)) | (1 << (CodeQLParser.T__76 - 72)) | (1 << (CodeQLParser.T__77 - 72)) | (1 << (CodeQLParser.T__78 - 72)) | (1 << (CodeQLParser.T__79 - 72)) | (1 << (CodeQLParser.T__81 - 72)) | (1 << (CodeQLParser.T__84 - 72)) | (1 << (CodeQLParser.T__85 - 72)) | (1 << (CodeQLParser.T__86 - 72)) | (1 << (CodeQLParser.T__87 - 72)) | (1 << (CodeQLParser.T__88 - 72)) | (1 << (CodeQLParser.T__89 - 72)) | (1 << (CodeQLParser.T__90 - 72)) | (1 << (CodeQLParser.T__91 - 72)) | (1 << (CodeQLParser.T__92 - 72)) | (1 << (CodeQLParser.T__93 - 72)) | (1 << (CodeQLParser.T__94 - 72)) | (1 << (CodeQLParser.T__97 - 72)) | (1 << (CodeQLParser.LOWERCASE_LETTER - 72)) | (1 << (CodeQLParser.UPPERCASE_LETTER - 72)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CodeQLParser.STRING - 105)) | (1 << (CodeQLParser.INT - 105)) | (1 << (CodeQLParser.FLOAT - 105)))) !== 0)) {
                this.state = 516;
                this.exprs();
            }

            this.state = 519;
            this.match(CodeQLParser.T__50);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassDefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_classDef;
    return this;
}

ClassDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDefContext.prototype.constructor = ClassDefContext;

ClassDefContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

ClassDefContext.prototype.classname = function() {
    return this.getTypedRuleContext(ClassnameContext,0);
};

ClassDefContext.prototype.qldoc = function() {
    return this.getTypedRuleContext(QldocContext,0);
};

ClassDefContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

ClassDefContext.prototype.member = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MemberContext);
    } else {
        return this.getTypedRuleContext(MemberContext,i);
    }
};

ClassDefContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterClassDef(this);
	}
};

ClassDefContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitClassDef(this);
	}
};

ClassDefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitClassDef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.ClassDefContext = ClassDefContext;

CodeQLParser.prototype.classDef = function() {

    var localctx = new ClassDefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, CodeQLParser.RULE_classDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 524;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__98) {
            this.state = 523;
            this.qldoc();
        }

        this.state = 526;
        this.annotations();
        this.state = 527;
        this.match(CodeQLParser.T__14);
        this.state = 528;
        this.classname();
        this.state = 538;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__15) {
            this.state = 529;
            this.match(CodeQLParser.T__15);
            this.state = 530;
            this.type();
            this.state = 535;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CodeQLParser.T__4) {
                this.state = 531;
                this.match(CodeQLParser.T__4);
                this.state = 532;
                this.type();
                this.state = 537;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 549;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__52) {
            this.state = 540;
            this.match(CodeQLParser.T__52);
            this.state = 541;
            this.type();
            this.state = 546;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CodeQLParser.T__4) {
                this.state = 542;
                this.match(CodeQLParser.T__4);
                this.state = 543;
                this.type();
                this.state = 548;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 551;
        this.match(CodeQLParser.T__1);
        this.state = 555;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CodeQLParser.T__24) | (1 << CodeQLParser.T__25) | (1 << CodeQLParser.T__26) | (1 << CodeQLParser.T__27) | (1 << CodeQLParser.T__28) | (1 << CodeQLParser.T__29) | (1 << CodeQLParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CodeQLParser.T__31 - 32)) | (1 << (CodeQLParser.T__32 - 32)) | (1 << (CodeQLParser.T__33 - 32)) | (1 << (CodeQLParser.T__34 - 32)) | (1 << (CodeQLParser.T__35 - 32)) | (1 << (CodeQLParser.T__36 - 32)) | (1 << (CodeQLParser.T__45 - 32)) | (1 << (CodeQLParser.T__47 - 32)) | (1 << (CodeQLParser.T__48 - 32)) | (1 << (CodeQLParser.T__53 - 32)) | (1 << (CodeQLParser.T__54 - 32)) | (1 << (CodeQLParser.T__55 - 32)) | (1 << (CodeQLParser.T__56 - 32)) | (1 << (CodeQLParser.T__57 - 32)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CodeQLParser.T__97 - 98)) | (1 << (CodeQLParser.T__98 - 98)) | (1 << (CodeQLParser.LOWERCASE_LETTER - 98)) | (1 << (CodeQLParser.UPPERCASE_LETTER - 98)))) !== 0)) {
            this.state = 552;
            this.member();
            this.state = 557;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 558;
        this.match(CodeQLParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MemberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_member;
    return this;
}

MemberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberContext.prototype.constructor = MemberContext;

MemberContext.prototype.character = function() {
    return this.getTypedRuleContext(CharacterContext,0);
};

MemberContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

MemberContext.prototype.field = function() {
    return this.getTypedRuleContext(FieldContext,0);
};

MemberContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterMember(this);
	}
};

MemberContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitMember(this);
	}
};

MemberContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitMember(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.MemberContext = MemberContext;

CodeQLParser.prototype.member = function() {

    var localctx = new MemberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, CodeQLParser.RULE_member);
    try {
        this.state = 563;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 560;
            this.character();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 561;
            this.predicate();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 562;
            this.field();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CharacterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_character;
    return this;
}

CharacterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CharacterContext.prototype.constructor = CharacterContext;

CharacterContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

CharacterContext.prototype.classname = function() {
    return this.getTypedRuleContext(ClassnameContext,0);
};

CharacterContext.prototype.formula = function() {
    return this.getTypedRuleContext(FormulaContext,0);
};

CharacterContext.prototype.qldoc = function() {
    return this.getTypedRuleContext(QldocContext,0);
};

CharacterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterCharacter(this);
	}
};

CharacterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitCharacter(this);
	}
};

CharacterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitCharacter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.CharacterContext = CharacterContext;

CodeQLParser.prototype.character = function() {

    var localctx = new CharacterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, CodeQLParser.RULE_character);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 566;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__98) {
            this.state = 565;
            this.qldoc();
        }

        this.state = 568;
        this.annotations();
        this.state = 569;
        this.classname();
        this.state = 570;
        this.match(CodeQLParser.T__49);
        this.state = 571;
        this.match(CodeQLParser.T__50);
        this.state = 572;
        this.match(CodeQLParser.T__1);
        this.state = 573;
        this.formula();
        this.state = 574;
        this.match(CodeQLParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_field;
    return this;
}

FieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldContext.prototype.constructor = FieldContext;

FieldContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

FieldContext.prototype.var_decl = function() {
    return this.getTypedRuleContext(Var_declContext,0);
};

FieldContext.prototype.qldoc = function() {
    return this.getTypedRuleContext(QldocContext,0);
};

FieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterField(this);
	}
};

FieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitField(this);
	}
};

FieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitField(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.FieldContext = FieldContext;

CodeQLParser.prototype.field = function() {

    var localctx = new FieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, CodeQLParser.RULE_field);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 577;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__98) {
            this.state = 576;
            this.qldoc();
        }

        this.state = 579;
        this.annotations();
        this.state = 580;
        this.var_decl();
        this.state = 581;
        this.match(CodeQLParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuleExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_moduleExpr;
    return this;
}

ModuleExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleExprContext.prototype.constructor = ModuleExprContext;

ModuleExprContext.prototype.modulename = function() {
    return this.getTypedRuleContext(ModulenameContext,0);
};

ModuleExprContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

ModuleExprContext.prototype.moduleExpr = function() {
    return this.getTypedRuleContext(ModuleExprContext,0);
};

ModuleExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterModuleExpr(this);
	}
};

ModuleExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitModuleExpr(this);
	}
};

ModuleExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitModuleExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CodeQLParser.prototype.moduleExpr = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ModuleExprContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 68;
    this.enterRecursionRule(localctx, 68, CodeQLParser.RULE_moduleExpr, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 584;
        this.modulename();
        this.state = 586;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
        if(la_===1) {
            this.state = 585;
            this.arguments();

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 596;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,61,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ModuleExprContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CodeQLParser.RULE_moduleExpr);
                this.state = 588;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 589;
                this.match(CodeQLParser.T__10);
                this.state = 590;
                this.modulename();
                this.state = 592;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
                if(la_===1) {
                    this.state = 591;
                    this.arguments();

                } 
            }
            this.state = 598;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,61,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ModuleSignatureExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_moduleSignatureExpr;
    return this;
}

ModuleSignatureExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleSignatureExprContext.prototype.constructor = ModuleSignatureExprContext;

ModuleSignatureExprContext.prototype.moduleSignatureName = function() {
    return this.getTypedRuleContext(ModuleSignatureNameContext,0);
};

ModuleSignatureExprContext.prototype.moduleExpr = function() {
    return this.getTypedRuleContext(ModuleExprContext,0);
};

ModuleSignatureExprContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

ModuleSignatureExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterModuleSignatureExpr(this);
	}
};

ModuleSignatureExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitModuleSignatureExpr(this);
	}
};

ModuleSignatureExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitModuleSignatureExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.ModuleSignatureExprContext = ModuleSignatureExprContext;

CodeQLParser.prototype.moduleSignatureExpr = function() {

    var localctx = new ModuleSignatureExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, CodeQLParser.RULE_moduleSignatureExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 602;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
        if(la_===1) {
            this.state = 599;
            this.moduleExpr(0);
            this.state = 600;
            this.match(CodeQLParser.T__10);

        }
        this.state = 604;
        this.moduleSignatureName();
        this.state = 606;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__3) {
            this.state = 605;
            this.arguments();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SignatureExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_signatureExpr;
    return this;
}

SignatureExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignatureExprContext.prototype.constructor = SignatureExprContext;

SignatureExprContext.prototype.simpleId = function() {
    return this.getTypedRuleContext(SimpleIdContext,0);
};

SignatureExprContext.prototype.moduleExpr = function() {
    return this.getTypedRuleContext(ModuleExprContext,0);
};

SignatureExprContext.prototype.INT = function() {
    return this.getToken(CodeQLParser.INT, 0);
};

SignatureExprContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

SignatureExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterSignatureExpr(this);
	}
};

SignatureExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitSignatureExpr(this);
	}
};

SignatureExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitSignatureExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.SignatureExprContext = SignatureExprContext;

CodeQLParser.prototype.signatureExpr = function() {

    var localctx = new SignatureExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, CodeQLParser.RULE_signatureExpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 611;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        if(la_===1) {
            this.state = 608;
            this.moduleExpr(0);
            this.state = 609;
            this.match(CodeQLParser.T__10);

        }
        this.state = 613;
        this.simpleId();
        this.state = 617;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case CodeQLParser.T__11:
        	this.state = 614;
        	this.match(CodeQLParser.T__11);
        	this.state = 615;
        	this.match(CodeQLParser.INT);
        	break;
        case CodeQLParser.T__3:
        	this.state = 616;
        	this.arguments();
        	break;
        case CodeQLParser.LOWERCASE_LETTER:
        case CodeQLParser.UPPERCASE_LETTER:
        	break;
        default:
        	break;
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.classname = function() {
    return this.getTypedRuleContext(ClassnameContext,0);
};

TypeContext.prototype.moduleExpr = function() {
    return this.getTypedRuleContext(ModuleExprContext,0);
};

TypeContext.prototype.dbasetype = function() {
    return this.getTypedRuleContext(DbasetypeContext,0);
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitType(this);
	}
};

TypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.TypeContext = TypeContext;

CodeQLParser.prototype.type = function() {

    var localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, CodeQLParser.RULE_type);
    try {
        this.state = 631;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CodeQLParser.LOWERCASE_LETTER:
        case CodeQLParser.UPPERCASE_LETTER:
            this.enterOuterAlt(localctx, 1);
            this.state = 622;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
            if(la_===1) {
                this.state = 619;
                this.moduleExpr(0);
                this.state = 620;
                this.match(CodeQLParser.T__10);

            }
            this.state = 624;
            this.classname();
            break;
        case CodeQLParser.T__97:
            this.enterOuterAlt(localctx, 2);
            this.state = 625;
            this.dbasetype();
            break;
        case CodeQLParser.T__53:
            this.enterOuterAlt(localctx, 3);
            this.state = 626;
            this.match(CodeQLParser.T__53);
            break;
        case CodeQLParser.T__54:
            this.enterOuterAlt(localctx, 4);
            this.state = 627;
            this.match(CodeQLParser.T__54);
            break;
        case CodeQLParser.T__55:
            this.enterOuterAlt(localctx, 5);
            this.state = 628;
            this.match(CodeQLParser.T__55);
            break;
        case CodeQLParser.T__56:
            this.enterOuterAlt(localctx, 6);
            this.state = 629;
            this.match(CodeQLParser.T__56);
            break;
        case CodeQLParser.T__57:
            this.enterOuterAlt(localctx, 7);
            this.state = 630;
            this.match(CodeQLParser.T__57);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExprsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_exprs;
    return this;
}

ExprsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprsContext.prototype.constructor = ExprsContext;

ExprsContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ExprsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterExprs(this);
	}
};

ExprsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitExprs(this);
	}
};

ExprsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitExprs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.ExprsContext = ExprsContext;

CodeQLParser.prototype.exprs = function() {

    var localctx = new ExprsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, CodeQLParser.RULE_exprs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 633;
        this.expr();
        this.state = 638;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CodeQLParser.T__4) {
            this.state = 634;
            this.match(CodeQLParser.T__4);
            this.state = 635;
            this.expr();
            this.state = 640;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_alias;
    return this;
}

AliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AliasContext.prototype.constructor = AliasContext;

AliasContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

AliasContext.prototype.literalId = function() {
    return this.getTypedRuleContext(LiteralIdContext,0);
};

AliasContext.prototype.predicateRef = function() {
    return this.getTypedRuleContext(PredicateRefContext,0);
};

AliasContext.prototype.INT = function() {
    return this.getToken(CodeQLParser.INT, 0);
};

AliasContext.prototype.qldoc = function() {
    return this.getTypedRuleContext(QldocContext,0);
};

AliasContext.prototype.classname = function() {
    return this.getTypedRuleContext(ClassnameContext,0);
};

AliasContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

AliasContext.prototype.modulename = function() {
    return this.getTypedRuleContext(ModulenameContext,0);
};

AliasContext.prototype.moduleExpr = function() {
    return this.getTypedRuleContext(ModuleExprContext,0);
};

AliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterAlias(this);
	}
};

AliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitAlias(this);
	}
};

AliasContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitAlias(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.AliasContext = AliasContext;

CodeQLParser.prototype.alias = function() {

    var localctx = new AliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, CodeQLParser.RULE_alias);
    var _la = 0; // Token type
    try {
        this.state = 673;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 642;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CodeQLParser.T__98) {
                this.state = 641;
                this.qldoc();
            }

            this.state = 644;
            this.annotations();
            this.state = 645;
            this.match(CodeQLParser.T__48);
            this.state = 646;
            this.literalId();
            this.state = 647;
            this.match(CodeQLParser.T__51);
            this.state = 648;
            this.predicateRef();
            this.state = 649;
            this.match(CodeQLParser.T__11);
            this.state = 650;
            this.match(CodeQLParser.INT);
            this.state = 651;
            this.match(CodeQLParser.T__13);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 654;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CodeQLParser.T__98) {
                this.state = 653;
                this.qldoc();
            }

            this.state = 656;
            this.annotations();
            this.state = 657;
            this.match(CodeQLParser.T__14);
            this.state = 658;
            this.classname();
            this.state = 659;
            this.match(CodeQLParser.T__51);
            this.state = 660;
            this.type();
            this.state = 661;
            this.match(CodeQLParser.T__13);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 664;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CodeQLParser.T__98) {
                this.state = 663;
                this.qldoc();
            }

            this.state = 666;
            this.annotations();
            this.state = 667;
            this.match(CodeQLParser.T__0);
            this.state = 668;
            this.modulename();
            this.state = 669;
            this.match(CodeQLParser.T__51);
            this.state = 670;
            this.moduleExpr(0);
            this.state = 671;
            this.match(CodeQLParser.T__13);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Var_declsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_var_decls;
    return this;
}

Var_declsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Var_declsContext.prototype.constructor = Var_declsContext;

Var_declsContext.prototype.var_decl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Var_declContext);
    } else {
        return this.getTypedRuleContext(Var_declContext,i);
    }
};

Var_declsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterVar_decls(this);
	}
};

Var_declsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitVar_decls(this);
	}
};

Var_declsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitVar_decls(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.Var_declsContext = Var_declsContext;

CodeQLParser.prototype.var_decls = function() {

    var localctx = new Var_declsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, CodeQLParser.RULE_var_decls);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 683;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CodeQLParser.T__53 - 54)) | (1 << (CodeQLParser.T__54 - 54)) | (1 << (CodeQLParser.T__55 - 54)) | (1 << (CodeQLParser.T__56 - 54)) | (1 << (CodeQLParser.T__57 - 54)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CodeQLParser.T__97 - 98)) | (1 << (CodeQLParser.LOWERCASE_LETTER - 98)) | (1 << (CodeQLParser.UPPERCASE_LETTER - 98)))) !== 0)) {
            this.state = 675;
            this.var_decl();
            this.state = 680;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CodeQLParser.T__4) {
                this.state = 676;
                this.match(CodeQLParser.T__4);
                this.state = 677;
                this.var_decl();
                this.state = 682;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Var_declContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_var_decl;
    return this;
}

Var_declContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Var_declContext.prototype.constructor = Var_declContext;

Var_declContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Var_declContext.prototype.lowerId = function() {
    return this.getTypedRuleContext(LowerIdContext,0);
};

Var_declContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterVar_decl(this);
	}
};

Var_declContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitVar_decl(this);
	}
};

Var_declContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitVar_decl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.Var_declContext = Var_declContext;

CodeQLParser.prototype.var_decl = function() {

    var localctx = new Var_declContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, CodeQLParser.RULE_var_decl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 685;
        this.type();
        this.state = 686;
        this.lowerId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormulaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_formula;
    return this;
}

FormulaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormulaContext.prototype.constructor = FormulaContext;

FormulaContext.prototype.ifthen = function() {
    return this.getTypedRuleContext(IfthenContext,0);
};

FormulaContext.prototype.implies = function() {
    return this.getTypedRuleContext(ImpliesContext,0);
};

FormulaContext.prototype.disjunction = function() {
    return this.getTypedRuleContext(DisjunctionContext,0);
};

FormulaContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterFormula(this);
	}
};

FormulaContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitFormula(this);
	}
};

FormulaContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitFormula(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.FormulaContext = FormulaContext;

CodeQLParser.prototype.formula = function() {

    var localctx = new FormulaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, CodeQLParser.RULE_formula);
    try {
        this.state = 691;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 688;
            this.ifthen();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 689;
            this.implies();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 690;
            this.disjunction();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfthenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_ifthen;
    return this;
}

IfthenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfthenContext.prototype.constructor = IfthenContext;

IfthenContext.prototype.formula = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FormulaContext);
    } else {
        return this.getTypedRuleContext(FormulaContext,i);
    }
};

IfthenContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterIfthen(this);
	}
};

IfthenContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitIfthen(this);
	}
};

IfthenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitIfthen(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.IfthenContext = IfthenContext;

CodeQLParser.prototype.ifthen = function() {

    var localctx = new IfthenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, CodeQLParser.RULE_ifthen);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 693;
        this.match(CodeQLParser.T__58);
        this.state = 694;
        this.formula();
        this.state = 695;
        this.match(CodeQLParser.T__59);
        this.state = 696;
        this.formula();
        this.state = 697;
        this.match(CodeQLParser.T__60);
        this.state = 698;
        this.formula();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImpliesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_implies;
    return this;
}

ImpliesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImpliesContext.prototype.constructor = ImpliesContext;

ImpliesContext.prototype.conjunction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConjunctionContext);
    } else {
        return this.getTypedRuleContext(ConjunctionContext,i);
    }
};

ImpliesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterImplies(this);
	}
};

ImpliesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitImplies(this);
	}
};

ImpliesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitImplies(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.ImpliesContext = ImpliesContext;

CodeQLParser.prototype.implies = function() {

    var localctx = new ImpliesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, CodeQLParser.RULE_implies);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 700;
        this.conjunction();
        this.state = 705;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CodeQLParser.T__61) {
            this.state = 701;
            this.match(CodeQLParser.T__61);
            this.state = 702;
            this.conjunction();
            this.state = 707;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DisjunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_disjunction;
    return this;
}

DisjunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DisjunctionContext.prototype.constructor = DisjunctionContext;

DisjunctionContext.prototype.conjunction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConjunctionContext);
    } else {
        return this.getTypedRuleContext(ConjunctionContext,i);
    }
};

DisjunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterDisjunction(this);
	}
};

DisjunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitDisjunction(this);
	}
};

DisjunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitDisjunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.DisjunctionContext = DisjunctionContext;

CodeQLParser.prototype.disjunction = function() {

    var localctx = new DisjunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, CodeQLParser.RULE_disjunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 708;
        this.conjunction();
        this.state = 713;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CodeQLParser.T__62) {
            this.state = 709;
            this.match(CodeQLParser.T__62);
            this.state = 710;
            this.conjunction();
            this.state = 715;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConjunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_conjunction;
    return this;
}

ConjunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConjunctionContext.prototype.constructor = ConjunctionContext;

ConjunctionContext.prototype.negated = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NegatedContext);
    } else {
        return this.getTypedRuleContext(NegatedContext,i);
    }
};

ConjunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterConjunction(this);
	}
};

ConjunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitConjunction(this);
	}
};

ConjunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitConjunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.ConjunctionContext = ConjunctionContext;

CodeQLParser.prototype.conjunction = function() {

    var localctx = new ConjunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, CodeQLParser.RULE_conjunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 716;
        this.negated();
        this.state = 721;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CodeQLParser.T__63) {
            this.state = 717;
            this.match(CodeQLParser.T__63);
            this.state = 718;
            this.negated();
            this.state = 723;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NegatedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_negated;
    return this;
}

NegatedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NegatedContext.prototype.constructor = NegatedContext;

NegatedContext.prototype.negated = function() {
    return this.getTypedRuleContext(NegatedContext,0);
};

NegatedContext.prototype.comparison = function() {
    return this.getTypedRuleContext(ComparisonContext,0);
};

NegatedContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterNegated(this);
	}
};

NegatedContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitNegated(this);
	}
};

NegatedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitNegated(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.NegatedContext = NegatedContext;

CodeQLParser.prototype.negated = function() {

    var localctx = new NegatedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, CodeQLParser.RULE_negated);
    try {
        this.state = 727;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CodeQLParser.T__64:
            this.enterOuterAlt(localctx, 1);
            this.state = 724;
            this.match(CodeQLParser.T__64);
            this.state = 725;
            this.negated();
            break;
        case CodeQLParser.T__36:
        case CodeQLParser.T__37:
        case CodeQLParser.T__49:
        case CodeQLParser.T__53:
        case CodeQLParser.T__54:
        case CodeQLParser.T__55:
        case CodeQLParser.T__56:
        case CodeQLParser.T__57:
        case CodeQLParser.T__71:
        case CodeQLParser.T__72:
        case CodeQLParser.T__74:
        case CodeQLParser.T__75:
        case CodeQLParser.T__76:
        case CodeQLParser.T__77:
        case CodeQLParser.T__78:
        case CodeQLParser.T__79:
        case CodeQLParser.T__81:
        case CodeQLParser.T__84:
        case CodeQLParser.T__85:
        case CodeQLParser.T__86:
        case CodeQLParser.T__87:
        case CodeQLParser.T__88:
        case CodeQLParser.T__89:
        case CodeQLParser.T__90:
        case CodeQLParser.T__91:
        case CodeQLParser.T__92:
        case CodeQLParser.T__93:
        case CodeQLParser.T__94:
        case CodeQLParser.T__97:
        case CodeQLParser.LOWERCASE_LETTER:
        case CodeQLParser.UPPERCASE_LETTER:
        case CodeQLParser.STRING:
        case CodeQLParser.INT:
        case CodeQLParser.FLOAT:
            this.enterOuterAlt(localctx, 2);
            this.state = 726;
            this.comparison();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComparisonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_comparison;
    return this;
}

ComparisonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonContext.prototype.constructor = ComparisonContext;

ComparisonContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ComparisonContext.prototype.compop = function() {
    return this.getTypedRuleContext(CompopContext,0);
};

ComparisonContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterComparison(this);
	}
};

ComparisonContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitComparison(this);
	}
};

ComparisonContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitComparison(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.ComparisonContext = ComparisonContext;

CodeQLParser.prototype.comparison = function() {

    var localctx = new ComparisonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, CodeQLParser.RULE_comparison);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 729;
        this.expr();
        this.state = 730;
        this.compop();
        this.state = 731;
        this.expr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CompopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_compop;
    return this;
}

CompopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompopContext.prototype.constructor = CompopContext;


CompopContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterCompop(this);
	}
};

CompopContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitCompop(this);
	}
};

CompopContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitCompop(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.CompopContext = CompopContext;

CodeQLParser.prototype.compop = function() {

    var localctx = new CompopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, CodeQLParser.RULE_compop);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 733;
        _la = this._input.LA(1);
        if(!(_la===CodeQLParser.T__3 || _la===CodeQLParser.T__5 || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (CodeQLParser.T__51 - 52)) | (1 << (CodeQLParser.T__65 - 52)) | (1 << (CodeQLParser.T__66 - 52)) | (1 << (CodeQLParser.T__67 - 52)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InstanceofClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_instanceofClause;
    return this;
}

InstanceofClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InstanceofClauseContext.prototype.constructor = InstanceofClauseContext;

InstanceofClauseContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

InstanceofClauseContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

InstanceofClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterInstanceofClause(this);
	}
};

InstanceofClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitInstanceofClause(this);
	}
};

InstanceofClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitInstanceofClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.InstanceofClauseContext = InstanceofClauseContext;

CodeQLParser.prototype.instanceofClause = function() {

    var localctx = new InstanceofClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, CodeQLParser.RULE_instanceofClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 735;
        this.expr();
        this.state = 736;
        this.match(CodeQLParser.T__68);
        this.state = 737;
        this.type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InrangeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_inrange;
    return this;
}

InrangeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InrangeContext.prototype.constructor = InrangeContext;

InrangeContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

InrangeContext.prototype.range = function() {
    return this.getTypedRuleContext(RangeContext,0);
};

InrangeContext.prototype.setliteral = function() {
    return this.getTypedRuleContext(SetliteralContext,0);
};

InrangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterInrange(this);
	}
};

InrangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitInrange(this);
	}
};

InrangeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitInrange(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.InrangeContext = InrangeContext;

CodeQLParser.prototype.inrange = function() {

    var localctx = new InrangeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, CodeQLParser.RULE_inrange);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 739;
        this.expr();
        this.state = 740;
        this.match(CodeQLParser.T__69);
        this.state = 743;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
        switch(la_) {
        case 1:
            this.state = 741;
            this.range();
            break;

        case 2:
            this.state = 742;
            this.setliteral();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_call;
    return this;
}

CallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallContext.prototype.constructor = CallContext;

CallContext.prototype.predicateRef = function() {
    return this.getTypedRuleContext(PredicateRefContext,0);
};

CallContext.prototype.closure = function() {
    return this.getTypedRuleContext(ClosureContext,0);
};

CallContext.prototype.exprs = function() {
    return this.getTypedRuleContext(ExprsContext,0);
};

CallContext.prototype.primary = function() {
    return this.getTypedRuleContext(PrimaryContext,0);
};

CallContext.prototype.predicateName = function() {
    return this.getTypedRuleContext(PredicateNameContext,0);
};

CallContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterCall(this);
	}
};

CallContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitCall(this);
	}
};

CallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.CallContext = CallContext;

CodeQLParser.prototype.call = function() {

    var localctx = new CallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, CodeQLParser.RULE_call);
    var _la = 0; // Token type
    try {
        this.state = 767;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 745;
            this.predicateRef();
            this.state = 747;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CodeQLParser.T__70 || _la===CodeQLParser.T__71) {
                this.state = 746;
                this.closure();
            }

            this.state = 749;
            this.match(CodeQLParser.T__49);
            this.state = 751;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (CodeQLParser.T__36 - 37)) | (1 << (CodeQLParser.T__37 - 37)) | (1 << (CodeQLParser.T__49 - 37)) | (1 << (CodeQLParser.T__53 - 37)) | (1 << (CodeQLParser.T__54 - 37)) | (1 << (CodeQLParser.T__55 - 37)) | (1 << (CodeQLParser.T__56 - 37)) | (1 << (CodeQLParser.T__57 - 37)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CodeQLParser.T__71 - 72)) | (1 << (CodeQLParser.T__72 - 72)) | (1 << (CodeQLParser.T__74 - 72)) | (1 << (CodeQLParser.T__75 - 72)) | (1 << (CodeQLParser.T__76 - 72)) | (1 << (CodeQLParser.T__77 - 72)) | (1 << (CodeQLParser.T__78 - 72)) | (1 << (CodeQLParser.T__79 - 72)) | (1 << (CodeQLParser.T__81 - 72)) | (1 << (CodeQLParser.T__84 - 72)) | (1 << (CodeQLParser.T__85 - 72)) | (1 << (CodeQLParser.T__86 - 72)) | (1 << (CodeQLParser.T__87 - 72)) | (1 << (CodeQLParser.T__88 - 72)) | (1 << (CodeQLParser.T__89 - 72)) | (1 << (CodeQLParser.T__90 - 72)) | (1 << (CodeQLParser.T__91 - 72)) | (1 << (CodeQLParser.T__92 - 72)) | (1 << (CodeQLParser.T__93 - 72)) | (1 << (CodeQLParser.T__94 - 72)) | (1 << (CodeQLParser.T__97 - 72)) | (1 << (CodeQLParser.LOWERCASE_LETTER - 72)) | (1 << (CodeQLParser.UPPERCASE_LETTER - 72)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CodeQLParser.STRING - 105)) | (1 << (CodeQLParser.INT - 105)) | (1 << (CodeQLParser.FLOAT - 105)))) !== 0)) {
                this.state = 750;
                this.exprs();
            }

            this.state = 753;
            this.match(CodeQLParser.T__50);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 755;
            this.primary();
            this.state = 756;
            this.match(CodeQLParser.T__9);
            this.state = 757;
            this.predicateName();
            this.state = 759;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CodeQLParser.T__70 || _la===CodeQLParser.T__71) {
                this.state = 758;
                this.closure();
            }

            this.state = 761;
            this.match(CodeQLParser.T__49);
            this.state = 763;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (CodeQLParser.T__36 - 37)) | (1 << (CodeQLParser.T__37 - 37)) | (1 << (CodeQLParser.T__49 - 37)) | (1 << (CodeQLParser.T__53 - 37)) | (1 << (CodeQLParser.T__54 - 37)) | (1 << (CodeQLParser.T__55 - 37)) | (1 << (CodeQLParser.T__56 - 37)) | (1 << (CodeQLParser.T__57 - 37)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CodeQLParser.T__71 - 72)) | (1 << (CodeQLParser.T__72 - 72)) | (1 << (CodeQLParser.T__74 - 72)) | (1 << (CodeQLParser.T__75 - 72)) | (1 << (CodeQLParser.T__76 - 72)) | (1 << (CodeQLParser.T__77 - 72)) | (1 << (CodeQLParser.T__78 - 72)) | (1 << (CodeQLParser.T__79 - 72)) | (1 << (CodeQLParser.T__81 - 72)) | (1 << (CodeQLParser.T__84 - 72)) | (1 << (CodeQLParser.T__85 - 72)) | (1 << (CodeQLParser.T__86 - 72)) | (1 << (CodeQLParser.T__87 - 72)) | (1 << (CodeQLParser.T__88 - 72)) | (1 << (CodeQLParser.T__89 - 72)) | (1 << (CodeQLParser.T__90 - 72)) | (1 << (CodeQLParser.T__91 - 72)) | (1 << (CodeQLParser.T__92 - 72)) | (1 << (CodeQLParser.T__93 - 72)) | (1 << (CodeQLParser.T__94 - 72)) | (1 << (CodeQLParser.T__97 - 72)) | (1 << (CodeQLParser.LOWERCASE_LETTER - 72)) | (1 << (CodeQLParser.UPPERCASE_LETTER - 72)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CodeQLParser.STRING - 105)) | (1 << (CodeQLParser.INT - 105)) | (1 << (CodeQLParser.FLOAT - 105)))) !== 0)) {
                this.state = 762;
                this.exprs();
            }

            this.state = 765;
            this.match(CodeQLParser.T__50);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClosureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_closure;
    return this;
}

ClosureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClosureContext.prototype.constructor = ClosureContext;


ClosureContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterClosure(this);
	}
};

ClosureContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitClosure(this);
	}
};

ClosureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitClosure(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.ClosureContext = ClosureContext;

CodeQLParser.prototype.closure = function() {

    var localctx = new ClosureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, CodeQLParser.RULE_closure);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 769;
        _la = this._input.LA(1);
        if(!(_la===CodeQLParser.T__70 || _la===CodeQLParser.T__71)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_expr;
    return this;
}

ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;

ExprContext.prototype.primary = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrimaryContext);
    } else {
        return this.getTypedRuleContext(PrimaryContext,i);
    }
};

ExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterExpr(this);
	}
};

ExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitExpr(this);
	}
};

ExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.ExprContext = ExprContext;

CodeQLParser.prototype.expr = function() {

    var localctx = new ExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, CodeQLParser.RULE_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 771;
        this.primary();
        this.state = 776;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CodeQLParser.T__11 || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CodeQLParser.T__70 - 71)) | (1 << (CodeQLParser.T__71 - 71)) | (1 << (CodeQLParser.T__72 - 71)) | (1 << (CodeQLParser.T__73 - 71)))) !== 0)) {
            this.state = 772;
            _la = this._input.LA(1);
            if(!(_la===CodeQLParser.T__11 || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CodeQLParser.T__70 - 71)) | (1 << (CodeQLParser.T__71 - 71)) | (1 << (CodeQLParser.T__72 - 71)) | (1 << (CodeQLParser.T__73 - 71)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 773;
            this.primary();
            this.state = 778;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_primary;
    return this;
}

PrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryContext.prototype.constructor = PrimaryContext;

PrimaryContext.prototype.basePrimary = function() {
    return this.getTypedRuleContext(BasePrimaryContext,0);
};

PrimaryContext.prototype.postfix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PostfixContext);
    } else {
        return this.getTypedRuleContext(PostfixContext,i);
    }
};

PrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterPrimary(this);
	}
};

PrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitPrimary(this);
	}
};

PrimaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitPrimary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.PrimaryContext = PrimaryContext;

CodeQLParser.prototype.primary = function() {

    var localctx = new PrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, CodeQLParser.RULE_primary);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 779;
        this.basePrimary();
        this.state = 783;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 780;
                this.postfix(); 
            }
            this.state = 785;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BasePrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_basePrimary;
    return this;
}

BasePrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BasePrimaryContext.prototype.constructor = BasePrimaryContext;

BasePrimaryContext.prototype.dontcare = function() {
    return this.getTypedRuleContext(DontcareContext,0);
};

BasePrimaryContext.prototype.unop = function() {
    return this.getTypedRuleContext(UnopContext,0);
};

BasePrimaryContext.prototype.cast = function() {
    return this.getTypedRuleContext(CastContext,0);
};

BasePrimaryContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

BasePrimaryContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

BasePrimaryContext.prototype.super_expr = function() {
    return this.getTypedRuleContext(Super_exprContext,0);
};

BasePrimaryContext.prototype.eparen = function() {
    return this.getTypedRuleContext(EparenContext,0);
};

BasePrimaryContext.prototype.aggregation = function() {
    return this.getTypedRuleContext(AggregationContext,0);
};

BasePrimaryContext.prototype.expression_pragma = function() {
    return this.getTypedRuleContext(Expression_pragmaContext,0);
};

BasePrimaryContext.prototype.any = function() {
    return this.getTypedRuleContext(AnyContext,0);
};

BasePrimaryContext.prototype.range = function() {
    return this.getTypedRuleContext(RangeContext,0);
};

BasePrimaryContext.prototype.setliteral = function() {
    return this.getTypedRuleContext(SetliteralContext,0);
};

BasePrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterBasePrimary(this);
	}
};

BasePrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitBasePrimary(this);
	}
};

BasePrimaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitBasePrimary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.BasePrimaryContext = BasePrimaryContext;

CodeQLParser.prototype.basePrimary = function() {

    var localctx = new BasePrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, CodeQLParser.RULE_basePrimary);
    try {
        this.state = 798;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 786;
            this.dontcare();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 787;
            this.unop();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 788;
            this.cast();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 789;
            this.literal();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 790;
            this.variable();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 791;
            this.super_expr();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 792;
            this.eparen();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 793;
            this.aggregation();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 794;
            this.expression_pragma();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 795;
            this.any();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 796;
            this.range();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 797;
            this.setliteral();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PostfixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_postfix;
    return this;
}

PostfixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostfixContext.prototype.constructor = PostfixContext;

PostfixContext.prototype.postfix_cast = function() {
    return this.getTypedRuleContext(Postfix_castContext,0);
};

PostfixContext.prototype.callwithresults = function() {
    return this.getTypedRuleContext(CallwithresultsContext,0);
};

PostfixContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterPostfix(this);
	}
};

PostfixContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitPostfix(this);
	}
};

PostfixContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitPostfix(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.PostfixContext = PostfixContext;

CodeQLParser.prototype.postfix = function() {

    var localctx = new PostfixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, CodeQLParser.RULE_postfix);
    try {
        this.state = 802;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 800;
            this.postfix_cast();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 801;
            this.callwithresults();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_unop;
    return this;
}

UnopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnopContext.prototype.constructor = UnopContext;

UnopContext.prototype.basePrimary = function() {
    return this.getTypedRuleContext(BasePrimaryContext,0);
};

UnopContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterUnop(this);
	}
};

UnopContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitUnop(this);
	}
};

UnopContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitUnop(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.UnopContext = UnopContext;

CodeQLParser.prototype.unop = function() {

    var localctx = new UnopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, CodeQLParser.RULE_unop);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 804;
        _la = this._input.LA(1);
        if(!(_la===CodeQLParser.T__71 || _la===CodeQLParser.T__72)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 805;
        this.basePrimary();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CastContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_cast;
    return this;
}

CastContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CastContext.prototype.constructor = CastContext;

CastContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

CastContext.prototype.basePrimary = function() {
    return this.getTypedRuleContext(BasePrimaryContext,0);
};

CastContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterCast(this);
	}
};

CastContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitCast(this);
	}
};

CastContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitCast(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.CastContext = CastContext;

CodeQLParser.prototype.cast = function() {

    var localctx = new CastContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, CodeQLParser.RULE_cast);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 807;
        this.match(CodeQLParser.T__49);
        this.state = 808;
        this.type();
        this.state = 809;
        this.match(CodeQLParser.T__50);
        this.state = 810;
        this.basePrimary();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EparenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_eparen;
    return this;
}

EparenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EparenContext.prototype.constructor = EparenContext;

EparenContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

EparenContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterEparen(this);
	}
};

EparenContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitEparen(this);
	}
};

EparenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitEparen(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.EparenContext = EparenContext;

CodeQLParser.prototype.eparen = function() {

    var localctx = new EparenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, CodeQLParser.RULE_eparen);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 812;
        this.match(CodeQLParser.T__49);
        this.state = 813;
        this.expr();
        this.state = 814;
        this.match(CodeQLParser.T__50);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DontcareContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_dontcare;
    return this;
}

DontcareContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DontcareContext.prototype.constructor = DontcareContext;


DontcareContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterDontcare(this);
	}
};

DontcareContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitDontcare(this);
	}
};

DontcareContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitDontcare(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.DontcareContext = DontcareContext;

CodeQLParser.prototype.dontcare = function() {

    var localctx = new DontcareContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, CodeQLParser.RULE_dontcare);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 816;
        this.match(CodeQLParser.T__74);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.INT = function() {
    return this.getToken(CodeQLParser.INT, 0);
};

LiteralContext.prototype.FLOAT = function() {
    return this.getToken(CodeQLParser.FLOAT, 0);
};

LiteralContext.prototype.STRING = function() {
    return this.getToken(CodeQLParser.STRING, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitLiteral(this);
	}
};

LiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.LiteralContext = LiteralContext;

CodeQLParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, CodeQLParser.RULE_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 818;
        _la = this._input.LA(1);
        if(!(((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (CodeQLParser.T__75 - 76)) | (1 << (CodeQLParser.T__76 - 76)) | (1 << (CodeQLParser.STRING - 76)) | (1 << (CodeQLParser.INT - 76)) | (1 << (CodeQLParser.FLOAT - 76)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_variable;
    return this;
}

VariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableContext.prototype.constructor = VariableContext;

VariableContext.prototype.varname = function() {
    return this.getTypedRuleContext(VarnameContext,0);
};

VariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterVariable(this);
	}
};

VariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitVariable(this);
	}
};

VariableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitVariable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.VariableContext = VariableContext;

CodeQLParser.prototype.variable = function() {

    var localctx = new VariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, CodeQLParser.RULE_variable);
    try {
        this.state = 823;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CodeQLParser.LOWERCASE_LETTER:
            this.enterOuterAlt(localctx, 1);
            this.state = 820;
            this.varname();
            break;
        case CodeQLParser.T__77:
            this.enterOuterAlt(localctx, 2);
            this.state = 821;
            this.match(CodeQLParser.T__77);
            break;
        case CodeQLParser.T__78:
            this.enterOuterAlt(localctx, 3);
            this.state = 822;
            this.match(CodeQLParser.T__78);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Super_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_super_expr;
    return this;
}

Super_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Super_exprContext.prototype.constructor = Super_exprContext;

Super_exprContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Super_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterSuper_expr(this);
	}
};

Super_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitSuper_expr(this);
	}
};

Super_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitSuper_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.Super_exprContext = Super_exprContext;

CodeQLParser.prototype.super_expr = function() {

    var localctx = new Super_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, CodeQLParser.RULE_super_expr);
    try {
        this.state = 830;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CodeQLParser.T__79:
            this.enterOuterAlt(localctx, 1);
            this.state = 825;
            this.match(CodeQLParser.T__79);
            break;
        case CodeQLParser.T__53:
        case CodeQLParser.T__54:
        case CodeQLParser.T__55:
        case CodeQLParser.T__56:
        case CodeQLParser.T__57:
        case CodeQLParser.T__97:
        case CodeQLParser.LOWERCASE_LETTER:
        case CodeQLParser.UPPERCASE_LETTER:
            this.enterOuterAlt(localctx, 2);
            this.state = 826;
            this.type();
            this.state = 827;
            this.match(CodeQLParser.T__9);
            this.state = 828;
            this.match(CodeQLParser.T__79);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Postfix_castContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_postfix_cast;
    return this;
}

Postfix_castContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Postfix_castContext.prototype.constructor = Postfix_castContext;

Postfix_castContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Postfix_castContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterPostfix_cast(this);
	}
};

Postfix_castContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitPostfix_cast(this);
	}
};

Postfix_castContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitPostfix_cast(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.Postfix_castContext = Postfix_castContext;

CodeQLParser.prototype.postfix_cast = function() {

    var localctx = new Postfix_castContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, CodeQLParser.RULE_postfix_cast);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 832;
        this.match(CodeQLParser.T__9);
        this.state = 833;
        this.match(CodeQLParser.T__49);
        this.state = 834;
        this.type();
        this.state = 835;
        this.match(CodeQLParser.T__50);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallwithresultsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_callwithresults;
    return this;
}

CallwithresultsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallwithresultsContext.prototype.constructor = CallwithresultsContext;

CallwithresultsContext.prototype.predicateRef = function() {
    return this.getTypedRuleContext(PredicateRefContext,0);
};

CallwithresultsContext.prototype.closure = function() {
    return this.getTypedRuleContext(ClosureContext,0);
};

CallwithresultsContext.prototype.exprs = function() {
    return this.getTypedRuleContext(ExprsContext,0);
};

CallwithresultsContext.prototype.predicateName = function() {
    return this.getTypedRuleContext(PredicateNameContext,0);
};

CallwithresultsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterCallwithresults(this);
	}
};

CallwithresultsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitCallwithresults(this);
	}
};

CallwithresultsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitCallwithresults(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.CallwithresultsContext = CallwithresultsContext;

CodeQLParser.prototype.callwithresults = function() {

    var localctx = new CallwithresultsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, CodeQLParser.RULE_callwithresults);
    var _la = 0; // Token type
    try {
        this.state = 858;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CodeQLParser.T__94:
        case CodeQLParser.T__96:
        case CodeQLParser.T__97:
        case CodeQLParser.LOWERCASE_LETTER:
        case CodeQLParser.UPPERCASE_LETTER:
            this.enterOuterAlt(localctx, 1);
            this.state = 837;
            this.predicateRef();
            this.state = 839;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CodeQLParser.T__70 || _la===CodeQLParser.T__71) {
                this.state = 838;
                this.closure();
            }

            this.state = 841;
            this.match(CodeQLParser.T__49);
            this.state = 843;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (CodeQLParser.T__36 - 37)) | (1 << (CodeQLParser.T__37 - 37)) | (1 << (CodeQLParser.T__49 - 37)) | (1 << (CodeQLParser.T__53 - 37)) | (1 << (CodeQLParser.T__54 - 37)) | (1 << (CodeQLParser.T__55 - 37)) | (1 << (CodeQLParser.T__56 - 37)) | (1 << (CodeQLParser.T__57 - 37)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CodeQLParser.T__71 - 72)) | (1 << (CodeQLParser.T__72 - 72)) | (1 << (CodeQLParser.T__74 - 72)) | (1 << (CodeQLParser.T__75 - 72)) | (1 << (CodeQLParser.T__76 - 72)) | (1 << (CodeQLParser.T__77 - 72)) | (1 << (CodeQLParser.T__78 - 72)) | (1 << (CodeQLParser.T__79 - 72)) | (1 << (CodeQLParser.T__81 - 72)) | (1 << (CodeQLParser.T__84 - 72)) | (1 << (CodeQLParser.T__85 - 72)) | (1 << (CodeQLParser.T__86 - 72)) | (1 << (CodeQLParser.T__87 - 72)) | (1 << (CodeQLParser.T__88 - 72)) | (1 << (CodeQLParser.T__89 - 72)) | (1 << (CodeQLParser.T__90 - 72)) | (1 << (CodeQLParser.T__91 - 72)) | (1 << (CodeQLParser.T__92 - 72)) | (1 << (CodeQLParser.T__93 - 72)) | (1 << (CodeQLParser.T__94 - 72)) | (1 << (CodeQLParser.T__97 - 72)) | (1 << (CodeQLParser.LOWERCASE_LETTER - 72)) | (1 << (CodeQLParser.UPPERCASE_LETTER - 72)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CodeQLParser.STRING - 105)) | (1 << (CodeQLParser.INT - 105)) | (1 << (CodeQLParser.FLOAT - 105)))) !== 0)) {
                this.state = 842;
                this.exprs();
            }

            this.state = 845;
            this.match(CodeQLParser.T__50);
            break;
        case CodeQLParser.T__9:
            this.enterOuterAlt(localctx, 2);
            this.state = 847;
            this.match(CodeQLParser.T__9);
            this.state = 848;
            this.predicateName();
            this.state = 850;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CodeQLParser.T__70 || _la===CodeQLParser.T__71) {
                this.state = 849;
                this.closure();
            }

            this.state = 852;
            this.match(CodeQLParser.T__49);
            this.state = 854;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (CodeQLParser.T__36 - 37)) | (1 << (CodeQLParser.T__37 - 37)) | (1 << (CodeQLParser.T__49 - 37)) | (1 << (CodeQLParser.T__53 - 37)) | (1 << (CodeQLParser.T__54 - 37)) | (1 << (CodeQLParser.T__55 - 37)) | (1 << (CodeQLParser.T__56 - 37)) | (1 << (CodeQLParser.T__57 - 37)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CodeQLParser.T__71 - 72)) | (1 << (CodeQLParser.T__72 - 72)) | (1 << (CodeQLParser.T__74 - 72)) | (1 << (CodeQLParser.T__75 - 72)) | (1 << (CodeQLParser.T__76 - 72)) | (1 << (CodeQLParser.T__77 - 72)) | (1 << (CodeQLParser.T__78 - 72)) | (1 << (CodeQLParser.T__79 - 72)) | (1 << (CodeQLParser.T__81 - 72)) | (1 << (CodeQLParser.T__84 - 72)) | (1 << (CodeQLParser.T__85 - 72)) | (1 << (CodeQLParser.T__86 - 72)) | (1 << (CodeQLParser.T__87 - 72)) | (1 << (CodeQLParser.T__88 - 72)) | (1 << (CodeQLParser.T__89 - 72)) | (1 << (CodeQLParser.T__90 - 72)) | (1 << (CodeQLParser.T__91 - 72)) | (1 << (CodeQLParser.T__92 - 72)) | (1 << (CodeQLParser.T__93 - 72)) | (1 << (CodeQLParser.T__94 - 72)) | (1 << (CodeQLParser.T__97 - 72)) | (1 << (CodeQLParser.LOWERCASE_LETTER - 72)) | (1 << (CodeQLParser.UPPERCASE_LETTER - 72)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CodeQLParser.STRING - 105)) | (1 << (CodeQLParser.INT - 105)) | (1 << (CodeQLParser.FLOAT - 105)))) !== 0)) {
                this.state = 853;
                this.exprs();
            }

            this.state = 856;
            this.match(CodeQLParser.T__50);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AggregationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_aggregation;
    return this;
}

AggregationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggregationContext.prototype.constructor = AggregationContext;

AggregationContext.prototype.aggid = function() {
    return this.getTypedRuleContext(AggidContext,0);
};

AggregationContext.prototype.var_decls = function() {
    return this.getTypedRuleContext(Var_declsContext,0);
};

AggregationContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

AggregationContext.prototype.formula = function() {
    return this.getTypedRuleContext(FormulaContext,0);
};

AggregationContext.prototype.as_exprs = function() {
    return this.getTypedRuleContext(As_exprsContext,0);
};

AggregationContext.prototype.aggorderbys = function() {
    return this.getTypedRuleContext(AggorderbysContext,0);
};

AggregationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterAggregation(this);
	}
};

AggregationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitAggregation(this);
	}
};

AggregationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitAggregation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.AggregationContext = AggregationContext;

CodeQLParser.prototype.aggregation = function() {

    var localctx = new AggregationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, CodeQLParser.RULE_aggregation);
    var _la = 0; // Token type
    try {
        this.state = 915;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 860;
            this.aggid();
            this.state = 865;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CodeQLParser.T__37) {
                this.state = 861;
                this.match(CodeQLParser.T__37);
                this.state = 862;
                this.expr();
                this.state = 863;
                this.match(CodeQLParser.T__44);
            }

            this.state = 867;
            this.match(CodeQLParser.T__49);
            this.state = 868;
            this.var_decls();
            this.state = 882;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CodeQLParser.T__80) {
                this.state = 869;
                this.match(CodeQLParser.T__80);
                this.state = 871;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (CodeQLParser.T__36 - 37)) | (1 << (CodeQLParser.T__37 - 37)) | (1 << (CodeQLParser.T__49 - 37)) | (1 << (CodeQLParser.T__53 - 37)) | (1 << (CodeQLParser.T__54 - 37)) | (1 << (CodeQLParser.T__55 - 37)) | (1 << (CodeQLParser.T__56 - 37)) | (1 << (CodeQLParser.T__57 - 37)) | (1 << (CodeQLParser.T__58 - 37)) | (1 << (CodeQLParser.T__64 - 37)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CodeQLParser.T__71 - 72)) | (1 << (CodeQLParser.T__72 - 72)) | (1 << (CodeQLParser.T__74 - 72)) | (1 << (CodeQLParser.T__75 - 72)) | (1 << (CodeQLParser.T__76 - 72)) | (1 << (CodeQLParser.T__77 - 72)) | (1 << (CodeQLParser.T__78 - 72)) | (1 << (CodeQLParser.T__79 - 72)) | (1 << (CodeQLParser.T__81 - 72)) | (1 << (CodeQLParser.T__84 - 72)) | (1 << (CodeQLParser.T__85 - 72)) | (1 << (CodeQLParser.T__86 - 72)) | (1 << (CodeQLParser.T__87 - 72)) | (1 << (CodeQLParser.T__88 - 72)) | (1 << (CodeQLParser.T__89 - 72)) | (1 << (CodeQLParser.T__90 - 72)) | (1 << (CodeQLParser.T__91 - 72)) | (1 << (CodeQLParser.T__92 - 72)) | (1 << (CodeQLParser.T__93 - 72)) | (1 << (CodeQLParser.T__94 - 72)) | (1 << (CodeQLParser.T__97 - 72)) | (1 << (CodeQLParser.LOWERCASE_LETTER - 72)) | (1 << (CodeQLParser.UPPERCASE_LETTER - 72)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CodeQLParser.STRING - 105)) | (1 << (CodeQLParser.INT - 105)) | (1 << (CodeQLParser.FLOAT - 105)))) !== 0)) {
                    this.state = 870;
                    this.formula();
                }

                this.state = 880;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CodeQLParser.T__80) {
                    this.state = 873;
                    this.match(CodeQLParser.T__80);
                    this.state = 874;
                    this.as_exprs();
                    this.state = 878;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CodeQLParser.T__20) {
                        this.state = 875;
                        this.match(CodeQLParser.T__20);
                        this.state = 876;
                        this.match(CodeQLParser.T__21);
                        this.state = 877;
                        this.aggorderbys();
                    }

                }

            }

            this.state = 884;
            this.match(CodeQLParser.T__50);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 886;
            this.aggid();
            this.state = 891;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CodeQLParser.T__37) {
                this.state = 887;
                this.match(CodeQLParser.T__37);
                this.state = 888;
                this.expr();
                this.state = 889;
                this.match(CodeQLParser.T__44);
            }

            this.state = 893;
            this.match(CodeQLParser.T__49);
            this.state = 894;
            this.as_exprs();
            this.state = 898;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CodeQLParser.T__20) {
                this.state = 895;
                this.match(CodeQLParser.T__20);
                this.state = 896;
                this.match(CodeQLParser.T__21);
                this.state = 897;
                this.aggorderbys();
            }

            this.state = 900;
            this.match(CodeQLParser.T__50);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 902;
            this.match(CodeQLParser.T__81);
            this.state = 903;
            this.match(CodeQLParser.T__49);
            this.state = 904;
            this.var_decls();
            this.state = 905;
            this.match(CodeQLParser.T__80);
            this.state = 907;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (CodeQLParser.T__36 - 37)) | (1 << (CodeQLParser.T__37 - 37)) | (1 << (CodeQLParser.T__49 - 37)) | (1 << (CodeQLParser.T__53 - 37)) | (1 << (CodeQLParser.T__54 - 37)) | (1 << (CodeQLParser.T__55 - 37)) | (1 << (CodeQLParser.T__56 - 37)) | (1 << (CodeQLParser.T__57 - 37)) | (1 << (CodeQLParser.T__58 - 37)) | (1 << (CodeQLParser.T__64 - 37)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CodeQLParser.T__71 - 72)) | (1 << (CodeQLParser.T__72 - 72)) | (1 << (CodeQLParser.T__74 - 72)) | (1 << (CodeQLParser.T__75 - 72)) | (1 << (CodeQLParser.T__76 - 72)) | (1 << (CodeQLParser.T__77 - 72)) | (1 << (CodeQLParser.T__78 - 72)) | (1 << (CodeQLParser.T__79 - 72)) | (1 << (CodeQLParser.T__81 - 72)) | (1 << (CodeQLParser.T__84 - 72)) | (1 << (CodeQLParser.T__85 - 72)) | (1 << (CodeQLParser.T__86 - 72)) | (1 << (CodeQLParser.T__87 - 72)) | (1 << (CodeQLParser.T__88 - 72)) | (1 << (CodeQLParser.T__89 - 72)) | (1 << (CodeQLParser.T__90 - 72)) | (1 << (CodeQLParser.T__91 - 72)) | (1 << (CodeQLParser.T__92 - 72)) | (1 << (CodeQLParser.T__93 - 72)) | (1 << (CodeQLParser.T__94 - 72)) | (1 << (CodeQLParser.T__97 - 72)) | (1 << (CodeQLParser.LOWERCASE_LETTER - 72)) | (1 << (CodeQLParser.UPPERCASE_LETTER - 72)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CodeQLParser.STRING - 105)) | (1 << (CodeQLParser.INT - 105)) | (1 << (CodeQLParser.FLOAT - 105)))) !== 0)) {
                this.state = 906;
                this.formula();
            }

            this.state = 911;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CodeQLParser.T__80) {
                this.state = 909;
                this.match(CodeQLParser.T__80);
                this.state = 910;
                this.as_exprs();
            }

            this.state = 913;
            this.match(CodeQLParser.T__50);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_pragmaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_expression_pragma;
    return this;
}

Expression_pragmaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_pragmaContext.prototype.constructor = Expression_pragmaContext;

Expression_pragmaContext.prototype.expression_pragma_type = function() {
    return this.getTypedRuleContext(Expression_pragma_typeContext,0);
};

Expression_pragmaContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Expression_pragmaContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterExpression_pragma(this);
	}
};

Expression_pragmaContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitExpression_pragma(this);
	}
};

Expression_pragmaContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitExpression_pragma(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.Expression_pragmaContext = Expression_pragmaContext;

CodeQLParser.prototype.expression_pragma = function() {

    var localctx = new Expression_pragmaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, CodeQLParser.RULE_expression_pragma);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 917;
        this.match(CodeQLParser.T__36);
        this.state = 918;
        this.match(CodeQLParser.T__37);
        this.state = 919;
        this.expression_pragma_type();
        this.state = 920;
        this.match(CodeQLParser.T__44);
        this.state = 921;
        this.match(CodeQLParser.T__49);
        this.state = 922;
        this.expr();
        this.state = 923;
        this.match(CodeQLParser.T__50);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_pragma_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_expression_pragma_type;
    return this;
}

Expression_pragma_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_pragma_typeContext.prototype.constructor = Expression_pragma_typeContext;


Expression_pragma_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterExpression_pragma_type(this);
	}
};

Expression_pragma_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitExpression_pragma_type(this);
	}
};

Expression_pragma_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitExpression_pragma_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.Expression_pragma_typeContext = Expression_pragma_typeContext;

CodeQLParser.prototype.expression_pragma_type = function() {

    var localctx = new Expression_pragma_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, CodeQLParser.RULE_expression_pragma_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 925;
        _la = this._input.LA(1);
        if(!(_la===CodeQLParser.T__82 || _la===CodeQLParser.T__83)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AggidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_aggid;
    return this;
}

AggidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggidContext.prototype.constructor = AggidContext;


AggidContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterAggid(this);
	}
};

AggidContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitAggid(this);
	}
};

AggidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitAggid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.AggidContext = AggidContext;

CodeQLParser.prototype.aggid = function() {

    var localctx = new AggidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, CodeQLParser.RULE_aggid);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 927;
        _la = this._input.LA(1);
        if(!(((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (CodeQLParser.T__84 - 85)) | (1 << (CodeQLParser.T__85 - 85)) | (1 << (CodeQLParser.T__86 - 85)) | (1 << (CodeQLParser.T__87 - 85)) | (1 << (CodeQLParser.T__88 - 85)) | (1 << (CodeQLParser.T__89 - 85)) | (1 << (CodeQLParser.T__90 - 85)) | (1 << (CodeQLParser.T__91 - 85)) | (1 << (CodeQLParser.T__92 - 85)) | (1 << (CodeQLParser.T__93 - 85)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AggorderbysContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_aggorderbys;
    return this;
}

AggorderbysContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggorderbysContext.prototype.constructor = AggorderbysContext;

AggorderbysContext.prototype.aggorderby = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AggorderbyContext);
    } else {
        return this.getTypedRuleContext(AggorderbyContext,i);
    }
};

AggorderbysContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterAggorderbys(this);
	}
};

AggorderbysContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitAggorderbys(this);
	}
};

AggorderbysContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitAggorderbys(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.AggorderbysContext = AggorderbysContext;

CodeQLParser.prototype.aggorderbys = function() {

    var localctx = new AggorderbysContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, CodeQLParser.RULE_aggorderbys);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 929;
        this.aggorderby();
        this.state = 934;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CodeQLParser.T__4) {
            this.state = 930;
            this.match(CodeQLParser.T__4);
            this.state = 931;
            this.aggorderby();
            this.state = 936;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AggorderbyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_aggorderby;
    return this;
}

AggorderbyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggorderbyContext.prototype.constructor = AggorderbyContext;

AggorderbyContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

AggorderbyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterAggorderby(this);
	}
};

AggorderbyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitAggorderby(this);
	}
};

AggorderbyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitAggorderby(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.AggorderbyContext = AggorderbyContext;

CodeQLParser.prototype.aggorderby = function() {

    var localctx = new AggorderbyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, CodeQLParser.RULE_aggorderby);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 937;
        this.expr();
        this.state = 939;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__22 || _la===CodeQLParser.T__23) {
            this.state = 938;
            _la = this._input.LA(1);
            if(!(_la===CodeQLParser.T__22 || _la===CodeQLParser.T__23)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_any;
    return this;
}

AnyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnyContext.prototype.constructor = AnyContext;

AnyContext.prototype.var_decls = function() {
    return this.getTypedRuleContext(Var_declsContext,0);
};

AnyContext.prototype.formula = function() {
    return this.getTypedRuleContext(FormulaContext,0);
};

AnyContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

AnyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterAny(this);
	}
};

AnyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitAny(this);
	}
};

AnyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitAny(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.AnyContext = AnyContext;

CodeQLParser.prototype.any = function() {

    var localctx = new AnyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, CodeQLParser.RULE_any);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 941;
        this.match(CodeQLParser.T__94);
        this.state = 942;
        this.match(CodeQLParser.T__49);
        this.state = 943;
        this.var_decls();
        this.state = 952;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__80) {
            this.state = 944;
            this.match(CodeQLParser.T__80);
            this.state = 946;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (CodeQLParser.T__36 - 37)) | (1 << (CodeQLParser.T__37 - 37)) | (1 << (CodeQLParser.T__49 - 37)) | (1 << (CodeQLParser.T__53 - 37)) | (1 << (CodeQLParser.T__54 - 37)) | (1 << (CodeQLParser.T__55 - 37)) | (1 << (CodeQLParser.T__56 - 37)) | (1 << (CodeQLParser.T__57 - 37)) | (1 << (CodeQLParser.T__58 - 37)) | (1 << (CodeQLParser.T__64 - 37)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CodeQLParser.T__71 - 72)) | (1 << (CodeQLParser.T__72 - 72)) | (1 << (CodeQLParser.T__74 - 72)) | (1 << (CodeQLParser.T__75 - 72)) | (1 << (CodeQLParser.T__76 - 72)) | (1 << (CodeQLParser.T__77 - 72)) | (1 << (CodeQLParser.T__78 - 72)) | (1 << (CodeQLParser.T__79 - 72)) | (1 << (CodeQLParser.T__81 - 72)) | (1 << (CodeQLParser.T__84 - 72)) | (1 << (CodeQLParser.T__85 - 72)) | (1 << (CodeQLParser.T__86 - 72)) | (1 << (CodeQLParser.T__87 - 72)) | (1 << (CodeQLParser.T__88 - 72)) | (1 << (CodeQLParser.T__89 - 72)) | (1 << (CodeQLParser.T__90 - 72)) | (1 << (CodeQLParser.T__91 - 72)) | (1 << (CodeQLParser.T__92 - 72)) | (1 << (CodeQLParser.T__93 - 72)) | (1 << (CodeQLParser.T__94 - 72)) | (1 << (CodeQLParser.T__97 - 72)) | (1 << (CodeQLParser.LOWERCASE_LETTER - 72)) | (1 << (CodeQLParser.UPPERCASE_LETTER - 72)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CodeQLParser.STRING - 105)) | (1 << (CodeQLParser.INT - 105)) | (1 << (CodeQLParser.FLOAT - 105)))) !== 0)) {
                this.state = 945;
                this.formula();
            }

            this.state = 950;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CodeQLParser.T__80) {
                this.state = 948;
                this.match(CodeQLParser.T__80);
                this.state = 949;
                this.expr();
            }

        }

        this.state = 954;
        this.match(CodeQLParser.T__50);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RangeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_range;
    return this;
}

RangeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RangeContext.prototype.constructor = RangeContext;

RangeContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

RangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterRange(this);
	}
};

RangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitRange(this);
	}
};

RangeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitRange(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.RangeContext = RangeContext;

CodeQLParser.prototype.range = function() {

    var localctx = new RangeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, CodeQLParser.RULE_range);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 956;
        this.match(CodeQLParser.T__37);
        this.state = 957;
        this.expr();
        this.state = 958;
        this.match(CodeQLParser.T__95);
        this.state = 959;
        this.expr();
        this.state = 960;
        this.match(CodeQLParser.T__44);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_setliteral;
    return this;
}

SetliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetliteralContext.prototype.constructor = SetliteralContext;

SetliteralContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

SetliteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterSetliteral(this);
	}
};

SetliteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitSetliteral(this);
	}
};

SetliteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitSetliteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.SetliteralContext = SetliteralContext;

CodeQLParser.prototype.setliteral = function() {

    var localctx = new SetliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, CodeQLParser.RULE_setliteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 962;
        this.match(CodeQLParser.T__37);
        this.state = 963;
        this.expr();
        this.state = 968;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,112,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 964;
                this.match(CodeQLParser.T__4);
                this.state = 965;
                this.expr(); 
            }
            this.state = 970;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,112,this._ctx);
        }

        this.state = 972;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CodeQLParser.T__4) {
            this.state = 971;
            this.match(CodeQLParser.T__4);
        }

        this.state = 974;
        this.match(CodeQLParser.T__44);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SimpleIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_simpleId;
    return this;
}

SimpleIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleIdContext.prototype.constructor = SimpleIdContext;

SimpleIdContext.prototype.lowerId = function() {
    return this.getTypedRuleContext(LowerIdContext,0);
};

SimpleIdContext.prototype.upperId = function() {
    return this.getTypedRuleContext(UpperIdContext,0);
};

SimpleIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterSimpleId(this);
	}
};

SimpleIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitSimpleId(this);
	}
};

SimpleIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitSimpleId(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.SimpleIdContext = SimpleIdContext;

CodeQLParser.prototype.simpleId = function() {

    var localctx = new SimpleIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, CodeQLParser.RULE_simpleId);
    try {
        this.state = 978;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CodeQLParser.LOWERCASE_LETTER:
            this.enterOuterAlt(localctx, 1);
            this.state = 976;
            this.lowerId();
            break;
        case CodeQLParser.UPPERCASE_LETTER:
            this.enterOuterAlt(localctx, 2);
            this.state = 977;
            this.upperId();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModulenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_modulename;
    return this;
}

ModulenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModulenameContext.prototype.constructor = ModulenameContext;

ModulenameContext.prototype.simpleId = function() {
    return this.getTypedRuleContext(SimpleIdContext,0);
};

ModulenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterModulename(this);
	}
};

ModulenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitModulename(this);
	}
};

ModulenameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitModulename(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.ModulenameContext = ModulenameContext;

CodeQLParser.prototype.modulename = function() {

    var localctx = new ModulenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, CodeQLParser.RULE_modulename);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 980;
        this.simpleId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuleSignatureNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_moduleSignatureName;
    return this;
}

ModuleSignatureNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleSignatureNameContext.prototype.constructor = ModuleSignatureNameContext;

ModuleSignatureNameContext.prototype.upperId = function() {
    return this.getTypedRuleContext(UpperIdContext,0);
};

ModuleSignatureNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterModuleSignatureName(this);
	}
};

ModuleSignatureNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitModuleSignatureName(this);
	}
};

ModuleSignatureNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitModuleSignatureName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.ModuleSignatureNameContext = ModuleSignatureNameContext;

CodeQLParser.prototype.moduleSignatureName = function() {

    var localctx = new ModuleSignatureNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, CodeQLParser.RULE_moduleSignatureName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 982;
        this.upperId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassnameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_classname;
    return this;
}

ClassnameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassnameContext.prototype.constructor = ClassnameContext;

ClassnameContext.prototype.upperId = function() {
    return this.getTypedRuleContext(UpperIdContext,0);
};

ClassnameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterClassname(this);
	}
};

ClassnameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitClassname(this);
	}
};

ClassnameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitClassname(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.ClassnameContext = ClassnameContext;

CodeQLParser.prototype.classname = function() {

    var localctx = new ClassnameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, CodeQLParser.RULE_classname);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 984;
        this.upperId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DbasetypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_dbasetype;
    return this;
}

DbasetypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DbasetypeContext.prototype.constructor = DbasetypeContext;

DbasetypeContext.prototype.atLowerId = function() {
    return this.getTypedRuleContext(AtLowerIdContext,0);
};

DbasetypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterDbasetype(this);
	}
};

DbasetypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitDbasetype(this);
	}
};

DbasetypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitDbasetype(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.DbasetypeContext = DbasetypeContext;

CodeQLParser.prototype.dbasetype = function() {

    var localctx = new DbasetypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, CodeQLParser.RULE_dbasetype);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 986;
        this.atLowerId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PredicateRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_predicateRef;
    return this;
}

PredicateRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateRefContext.prototype.constructor = PredicateRefContext;

PredicateRefContext.prototype.literalId = function() {
    return this.getTypedRuleContext(LiteralIdContext,0);
};

PredicateRefContext.prototype.moduleExpr = function() {
    return this.getTypedRuleContext(ModuleExprContext,0);
};

PredicateRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterPredicateRef(this);
	}
};

PredicateRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitPredicateRef(this);
	}
};

PredicateRefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitPredicateRef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.PredicateRefContext = PredicateRefContext;

CodeQLParser.prototype.predicateRef = function() {

    var localctx = new PredicateRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, CodeQLParser.RULE_predicateRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 991;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
        if(la_===1) {
            this.state = 988;
            this.moduleExpr(0);
            this.state = 989;
            this.match(CodeQLParser.T__10);

        }
        this.state = 993;
        this.literalId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PredicateNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_predicateName;
    return this;
}

PredicateNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateNameContext.prototype.constructor = PredicateNameContext;

PredicateNameContext.prototype.lowerId = function() {
    return this.getTypedRuleContext(LowerIdContext,0);
};

PredicateNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterPredicateName(this);
	}
};

PredicateNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitPredicateName(this);
	}
};

PredicateNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitPredicateName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.PredicateNameContext = PredicateNameContext;

CodeQLParser.prototype.predicateName = function() {

    var localctx = new PredicateNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, CodeQLParser.RULE_predicateName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 995;
        this.lowerId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_parameterName;
    return this;
}

ParameterNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterNameContext.prototype.constructor = ParameterNameContext;

ParameterNameContext.prototype.simpleId = function() {
    return this.getTypedRuleContext(SimpleIdContext,0);
};

ParameterNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterParameterName(this);
	}
};

ParameterNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitParameterName(this);
	}
};

ParameterNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitParameterName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.ParameterNameContext = ParameterNameContext;

CodeQLParser.prototype.parameterName = function() {

    var localctx = new ParameterNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, CodeQLParser.RULE_parameterName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 997;
        this.simpleId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VarnameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_varname;
    return this;
}

VarnameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarnameContext.prototype.constructor = VarnameContext;

VarnameContext.prototype.lowerId = function() {
    return this.getTypedRuleContext(LowerIdContext,0);
};

VarnameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterVarname(this);
	}
};

VarnameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitVarname(this);
	}
};

VarnameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitVarname(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.VarnameContext = VarnameContext;

CodeQLParser.prototype.varname = function() {

    var localctx = new VarnameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, CodeQLParser.RULE_varname);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 999;
        this.lowerId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_literalId;
    return this;
}

LiteralIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralIdContext.prototype.constructor = LiteralIdContext;

LiteralIdContext.prototype.lowerId = function() {
    return this.getTypedRuleContext(LowerIdContext,0);
};

LiteralIdContext.prototype.atLowerId = function() {
    return this.getTypedRuleContext(AtLowerIdContext,0);
};

LiteralIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterLiteralId(this);
	}
};

LiteralIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitLiteralId(this);
	}
};

LiteralIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitLiteralId(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.LiteralIdContext = LiteralIdContext;

CodeQLParser.prototype.literalId = function() {

    var localctx = new LiteralIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, CodeQLParser.RULE_literalId);
    try {
        this.state = 1005;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CodeQLParser.LOWERCASE_LETTER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1001;
            this.lowerId();
            break;
        case CodeQLParser.T__97:
            this.enterOuterAlt(localctx, 2);
            this.state = 1002;
            this.atLowerId();
            break;
        case CodeQLParser.T__94:
            this.enterOuterAlt(localctx, 3);
            this.state = 1003;
            this.match(CodeQLParser.T__94);
            break;
        case CodeQLParser.T__96:
            this.enterOuterAlt(localctx, 4);
            this.state = 1004;
            this.match(CodeQLParser.T__96);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LowerIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_lowerId;
    return this;
}

LowerIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LowerIdContext.prototype.constructor = LowerIdContext;

LowerIdContext.prototype.LOWERCASE_LETTER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CodeQLParser.LOWERCASE_LETTER);
    } else {
        return this.getToken(CodeQLParser.LOWERCASE_LETTER, i);
    }
};


LowerIdContext.prototype.UPPERCASE_LETTER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CodeQLParser.UPPERCASE_LETTER);
    } else {
        return this.getToken(CodeQLParser.UPPERCASE_LETTER, i);
    }
};


LowerIdContext.prototype.DIGIT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CodeQLParser.DIGIT);
    } else {
        return this.getToken(CodeQLParser.DIGIT, i);
    }
};


LowerIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterLowerId(this);
	}
};

LowerIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitLowerId(this);
	}
};

LowerIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitLowerId(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.LowerIdContext = LowerIdContext;

CodeQLParser.prototype.lowerId = function() {

    var localctx = new LowerIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, CodeQLParser.RULE_lowerId);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1007;
        this.match(CodeQLParser.LOWERCASE_LETTER);
        this.state = 1011;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,117,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1008;
                _la = this._input.LA(1);
                if(!(((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (CodeQLParser.T__74 - 75)) | (1 << (CodeQLParser.LOWERCASE_LETTER - 75)) | (1 << (CodeQLParser.UPPERCASE_LETTER - 75)) | (1 << (CodeQLParser.DIGIT - 75)))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                } 
            }
            this.state = 1013;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,117,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UpperIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_upperId;
    return this;
}

UpperIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UpperIdContext.prototype.constructor = UpperIdContext;

UpperIdContext.prototype.UPPERCASE_LETTER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CodeQLParser.UPPERCASE_LETTER);
    } else {
        return this.getToken(CodeQLParser.UPPERCASE_LETTER, i);
    }
};


UpperIdContext.prototype.LOWERCASE_LETTER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CodeQLParser.LOWERCASE_LETTER);
    } else {
        return this.getToken(CodeQLParser.LOWERCASE_LETTER, i);
    }
};


UpperIdContext.prototype.DIGIT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CodeQLParser.DIGIT);
    } else {
        return this.getToken(CodeQLParser.DIGIT, i);
    }
};


UpperIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterUpperId(this);
	}
};

UpperIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitUpperId(this);
	}
};

UpperIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitUpperId(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.UpperIdContext = UpperIdContext;

CodeQLParser.prototype.upperId = function() {

    var localctx = new UpperIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, CodeQLParser.RULE_upperId);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1014;
        this.match(CodeQLParser.UPPERCASE_LETTER);
        this.state = 1018;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,118,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1015;
                _la = this._input.LA(1);
                if(!(((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (CodeQLParser.T__74 - 75)) | (1 << (CodeQLParser.LOWERCASE_LETTER - 75)) | (1 << (CodeQLParser.UPPERCASE_LETTER - 75)) | (1 << (CodeQLParser.DIGIT - 75)))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                } 
            }
            this.state = 1020;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,118,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AtLowerIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_atLowerId;
    return this;
}

AtLowerIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtLowerIdContext.prototype.constructor = AtLowerIdContext;

AtLowerIdContext.prototype.lowerId = function() {
    return this.getTypedRuleContext(LowerIdContext,0);
};

AtLowerIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterAtLowerId(this);
	}
};

AtLowerIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitAtLowerId(this);
	}
};

AtLowerIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitAtLowerId(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.AtLowerIdContext = AtLowerIdContext;

CodeQLParser.prototype.atLowerId = function() {

    var localctx = new AtLowerIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, CodeQLParser.RULE_atLowerId);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1021;
        this.match(CodeQLParser.T__97);
        this.state = 1022;
        this.lowerId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QldocContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CodeQLParser.RULE_qldoc;
    return this;
}

QldocContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QldocContext.prototype.constructor = QldocContext;


QldocContext.prototype.enterRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.enterQldoc(this);
	}
};

QldocContext.prototype.exitRule = function(listener) {
    if(listener instanceof CodeQLListener ) {
        listener.exitQldoc(this);
	}
};

QldocContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CodeQLVisitor ) {
        return visitor.visitQldoc(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CodeQLParser.QldocContext = QldocContext;

CodeQLParser.prototype.qldoc = function() {

    var localctx = new QldocContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, CodeQLParser.RULE_qldoc);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1024;
        this.match(CodeQLParser.T__98);
        this.state = 1028;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,119,this._ctx)
        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1+1) {
                this.state = 1025;
                this.matchWildcard(); 
            }
            this.state = 1030;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,119,this._ctx);
        }

        this.state = 1031;
        this.match(CodeQLParser.T__99);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


CodeQLParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 6:
			return this.qualId_sempred(localctx, predIndex);
	case 7:
			return this.importModuleExpr_sempred(localctx, predIndex);
	case 34:
			return this.moduleExpr_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

CodeQLParser.prototype.qualId_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CodeQLParser.prototype.importModuleExpr_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CodeQLParser.prototype.moduleExpr_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.CodeQLParser = CodeQLParser;
